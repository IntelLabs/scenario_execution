# Copyright (C) 2024 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# Generated from OpenSCENARIO2.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3k")
        buf.write("\u0531\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\3\2\7\2\u011c")
        buf.write("\n\2\f\2\16\2\u011f\13\2\3\2\7\2\u0122\n\2\f\2\16\2\u0125")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\5\4\u0130\n")
        buf.write("\4\3\5\3\5\5\5\u0134\n\5\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u013c")
        buf.write("\n\6\f\6\16\6\u013f\13\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\5\7\u014c\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\t\3\t\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\5\16\u0169\n\16\3")
        buf.write("\17\3\17\3\17\7\17\u016e\n\17\f\17\16\17\u0171\13\17\3")
        buf.write("\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\5\21\u017c")
        buf.write("\n\21\3\21\3\21\5\21\u0180\n\21\3\21\3\21\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u0188\n\22\3\23\3\23\3\23\3\23\5\23\u018e")
        buf.write("\n\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25")
        buf.write("\u0199\n\25\f\25\16\25\u019c\13\25\3\25\3\25\3\25\3\26")
        buf.write("\3\26\3\26\5\26\u01a4\n\26\3\27\3\27\3\30\3\30\3\31\3")
        buf.write("\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u01b5\n\33\3\33\3\33\3\34\3\34\3\34\5\34\u01bc\n\34\3")
        buf.write("\34\3\34\3\34\3\34\6\34\u01c2\n\34\r\34\16\34\u01c3\3")
        buf.write("\34\3\34\3\34\5\34\u01c9\n\34\3\35\3\35\3\35\5\35\u01ce")
        buf.write("\n\35\3\36\3\36\3\36\3\36\3\36\5\36\u01d5\n\36\3\37\3")
        buf.write("\37\3 \3 \3!\3!\3!\5!\u01de\n!\3!\3!\3!\3!\6!\u01e4\n")
        buf.write("!\r!\16!\u01e5\3!\3!\3!\5!\u01eb\n!\3\"\3\"\3\"\5\"\u01f0")
        buf.write("\n\"\3#\3#\3#\3#\3#\5#\u01f7\n#\3$\3$\3%\3%\3%\5%\u01fe")
        buf.write("\n%\3%\3%\3%\3%\3%\6%\u0205\n%\r%\16%\u0206\3%\3%\3%\5")
        buf.write("%\u020c\n%\3&\3&\3&\5&\u0211\n&\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\5\'\u0219\n\'\3(\3(\3(\5(\u021e\n(\3(\3(\3)\3)\3*\3")
        buf.write("*\3*\5*\u0227\n*\3*\3*\3*\3*\3*\6*\u022e\n*\r*\16*\u022f")
        buf.write("\3*\3*\3*\5*\u0235\n*\3+\3+\3+\5+\u023a\n+\3,\3,\3,\3")
        buf.write(",\5,\u0240\n,\3,\3,\3,\5,\u0245\n,\3,\3,\3,\3,\6,\u024b")
        buf.write("\n,\r,\16,\u024c\3,\3,\3,\5,\u0252\n,\3-\3-\3.\3.\5.\u0258")
        buf.write("\n.\3/\3/\3/\3/\3/\3/\3/\7/\u0261\n/\f/\16/\u0264\13/")
        buf.write("\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\6\60\u026f\n\60")
        buf.write("\r\60\16\60\u0270\3\60\3\60\3\61\3\61\5\61\u0277\n\61")
        buf.write("\3\62\3\62\3\62\3\62\5\62\u027d\n\62\3\63\3\63\3\63\3")
        buf.write("\63\7\63\u0283\n\63\f\63\16\63\u0286\13\63\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u028c\n\63\3\63\3\63\5\63\u0290\n\63\3\64")
        buf.write("\3\64\5\64\u0294\n\64\3\65\3\65\3\65\5\65\u0299\n\65\3")
        buf.write("\66\3\66\3\67\3\67\3\67\3\67\38\38\39\39\3:\3:\3:\3:\3")
        buf.write(":\3:\5:\u02ab\n:\3:\3:\5:\u02af\n:\3:\3:\3;\3;\5;\u02b5")
        buf.write("\n;\3;\3;\5;\u02b9\n;\3;\5;\u02bc\n;\3<\3<\3<\3=\3=\3")
        buf.write("=\3>\3>\3?\3?\3@\3@\3@\5@\u02cb\n@\3@\3@\3A\3A\3A\3A\3")
        buf.write("A\5A\u02d4\nA\3B\3B\3B\3B\3B\3C\3C\3C\3C\3C\3D\3D\3D\3")
        buf.write("D\3D\3E\3E\3E\3E\3E\3E\3E\3E\5E\u02ed\nE\3E\3E\3F\3F\3")
        buf.write("G\3G\3H\3H\5H\u02f7\nH\3I\3I\3I\7I\u02fc\nI\fI\16I\u02ff")
        buf.write("\13I\3I\3I\3I\3I\5I\u0305\nI\3I\3I\5I\u0309\nI\3J\3J\3")
        buf.write("J\3J\7J\u030f\nJ\fJ\16J\u0312\13J\3J\3J\3J\3J\3J\5J\u0319")
        buf.write("\nJ\5J\u031b\nJ\3J\3J\3K\3K\3K\3K\3K\3K\3K\5K\u0326\n")
        buf.write("K\3K\3K\3L\3L\3M\3M\3M\3M\3M\6M\u0331\nM\rM\16M\u0332")
        buf.write("\3M\3M\3N\3N\5N\u0339\nN\3O\3O\5O\u033d\nO\3P\3P\3P\5")
        buf.write("P\u0342\nP\3P\3P\3P\3P\3Q\3Q\3R\3R\3S\3S\3S\3S\3S\3S\3")
        buf.write("T\3T\5T\u0354\nT\3U\3U\5U\u0358\nU\3U\3U\5U\u035c\nU\3")
        buf.write("U\3U\3U\5U\u0361\nU\3U\3U\3U\3V\3V\3V\3V\3V\3W\3W\5W\u036d")
        buf.write("\nW\3X\3X\3X\3X\3X\3X\6X\u0375\nX\rX\16X\u0376\3X\3X\3")
        buf.write("Y\3Y\5Y\u037d\nY\3Z\3Z\3Z\3[\3[\3[\5[\u0385\n[\3[\3[\3")
        buf.write("[\3[\3[\5[\u038c\n[\3\\\3\\\3\\\5\\\u0391\n\\\3\\\5\\")
        buf.write("\u0394\n\\\3\\\3\\\3\\\3\\\6\\\u039a\n\\\r\\\16\\\u039b")
        buf.write("\3\\\3\\\5\\\u03a0\n\\\3]\3]\3^\3^\3^\5^\u03a7\n^\3^\3")
        buf.write("^\3^\5^\u03ac\n^\3^\3^\3^\5^\u03b1\n^\3_\3_\3_\3_\3_\6")
        buf.write("_\u03b8\n_\r_\16_\u03b9\3_\3_\3`\3`\3`\5`\u03c1\n`\3a")
        buf.write("\3a\3b\3b\3c\3c\3c\3c\3d\3d\3d\3d\3d\3d\5d\u03d1\nd\3")
        buf.write("d\3d\3e\3e\3e\3e\3f\3f\3f\3f\3g\3g\3g\5g\u03e0\ng\3g\3")
        buf.write("g\3h\3h\3h\3h\5h\u03e8\nh\3h\3h\3h\5h\u03ed\nh\3h\3h\3")
        buf.write("h\3i\3i\3j\3j\5j\u03f6\nj\3j\3j\3j\3j\3j\3j\3j\5j\u03ff")
        buf.write("\nj\3j\3j\5j\u0403\nj\3k\3k\3l\3l\3m\3m\5m\u040b\nm\3")
        buf.write("n\3n\3n\5n\u0410\nn\3n\7n\u0413\nn\fn\16n\u0416\13n\3")
        buf.write("n\3n\3n\3o\3o\3o\5o\u041e\no\3o\7o\u0421\no\fo\16o\u0424")
        buf.write("\13o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u043f\np\3q\3q\3r\3r\5r\u0445")
        buf.write("\nr\3s\3s\3s\3s\3s\3s\3t\3t\3t\7t\u0450\nt\ft\16t\u0453")
        buf.write("\13t\3u\3u\3u\7u\u0458\nu\fu\16u\u045b\13u\3v\3v\3v\7")
        buf.write("v\u0460\nv\fv\16v\u0463\13v\3w\3w\3w\5w\u0468\nw\3x\3")
        buf.write("x\3x\3x\3x\3x\3x\7x\u0471\nx\fx\16x\u0474\13x\3y\3y\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\7z\u047f\nz\fz\16z\u0482\13z\3{\3")
        buf.write("{\3|\3|\3|\3|\3|\3|\3|\7|\u048d\n|\f|\16|\u0490\13|\3")
        buf.write("}\3}\3~\3~\3~\5~\u0497\n~\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\5\177\u04b2\n\177\3\177\3\177\3\177\3\177")
        buf.write("\7\177\u04b8\n\177\f\177\16\177\u04bb\13\177\3\u0080\3")
        buf.write("\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\5\u0081\u04c8\n\u0081\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\5\u0082\u04d3\n\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\3\u0083\7\u0083\u04d9\n\u0083\f\u0083\16\u0083\u04dc")
        buf.write("\13\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\5\u0084\u04ed\n\u0084\3\u0085\3\u0085")
        buf.write("\3\u0085\7\u0085\u04f2\n\u0085\f\u0085\16\u0085\u04f5")
        buf.write("\13\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\7\u0086")
        buf.write("\u04fc\n\u0086\f\u0086\16\u0086\u04ff\13\u0086\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0506\n\u0087")
        buf.write("\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\7\u0089\u050d")
        buf.write("\n\u0089\f\u0089\16\u0089\u0510\13\u0089\3\u0089\3\u0089")
        buf.write("\7\u0089\u0514\n\u0089\f\u0089\16\u0089\u0517\13\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\7\u0089\u051c\n\u0089\f\u0089")
        buf.write("\16\u0089\u051f\13\u0089\5\u0089\u0521\n\u0089\3\u008a")
        buf.write("\3\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c")
        buf.write("\5\u008c\u052b\n\u008c\3\u008c\3\u008c\3\u008d\3\u008d")
        buf.write("\3\u008d\2\7\n\u00ee\u00f2\u00f6\u00fc\u008e\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\2\13\3\2\16\25\3\2ef\3\2#\'\3\2\64\65\3\29;\4\2")
        buf.write("\31\31NS\3\2TU\3\2VX\3\2eg\2\u0550\2\u011d\3\2\2\2\4\u0128")
        buf.write("\3\2\2\2\6\u012f\3\2\2\2\b\u0133\3\2\2\2\n\u0135\3\2\2")
        buf.write("\2\f\u014b\3\2\2\2\16\u014d\3\2\2\2\20\u0153\3\2\2\2\22")
        buf.write("\u0155\3\2\2\2\24\u0157\3\2\2\2\26\u015c\3\2\2\2\30\u0164")
        buf.write("\3\2\2\2\32\u0168\3\2\2\2\34\u016a\3\2\2\2\36\u0172\3")
        buf.write("\2\2\2 \u0176\3\2\2\2\"\u0183\3\2\2\2$\u0189\3\2\2\2&")
        buf.write("\u018f\3\2\2\2(\u0191\3\2\2\2*\u01a0\3\2\2\2,\u01a5\3")
        buf.write("\2\2\2.\u01a7\3\2\2\2\60\u01a9\3\2\2\2\62\u01ab\3\2\2")
        buf.write("\2\64\u01af\3\2\2\2\66\u01b8\3\2\2\28\u01ca\3\2\2\2:\u01d4")
        buf.write("\3\2\2\2<\u01d6\3\2\2\2>\u01d8\3\2\2\2@\u01da\3\2\2\2")
        buf.write("B\u01ec\3\2\2\2D\u01f6\3\2\2\2F\u01f8\3\2\2\2H\u01fa\3")
        buf.write("\2\2\2J\u020d\3\2\2\2L\u0218\3\2\2\2N\u021d\3\2\2\2P\u0221")
        buf.write("\3\2\2\2R\u0223\3\2\2\2T\u0236\3\2\2\2V\u023b\3\2\2\2")
        buf.write("X\u0253\3\2\2\2Z\u0257\3\2\2\2\\\u0259\3\2\2\2^\u0268")
        buf.write("\3\2\2\2`\u0276\3\2\2\2b\u027c\3\2\2\2d\u027e\3\2\2\2")
        buf.write("f\u0293\3\2\2\2h\u0298\3\2\2\2j\u029a\3\2\2\2l\u029c\3")
        buf.write("\2\2\2n\u02a0\3\2\2\2p\u02a2\3\2\2\2r\u02a4\3\2\2\2t\u02bb")
        buf.write("\3\2\2\2v\u02bd\3\2\2\2x\u02c0\3\2\2\2z\u02c3\3\2\2\2")
        buf.write("|\u02c5\3\2\2\2~\u02ca\3\2\2\2\u0080\u02d3\3\2\2\2\u0082")
        buf.write("\u02d5\3\2\2\2\u0084\u02da\3\2\2\2\u0086\u02df\3\2\2\2")
        buf.write("\u0088\u02e4\3\2\2\2\u008a\u02f0\3\2\2\2\u008c\u02f2\3")
        buf.write("\2\2\2\u008e\u02f6\3\2\2\2\u0090\u02f8\3\2\2\2\u0092\u030a")
        buf.write("\3\2\2\2\u0094\u031e\3\2\2\2\u0096\u0329\3\2\2\2\u0098")
        buf.write("\u032b\3\2\2\2\u009a\u0338\3\2\2\2\u009c\u033c\3\2\2\2")
        buf.write("\u009e\u033e\3\2\2\2\u00a0\u0347\3\2\2\2\u00a2\u0349\3")
        buf.write("\2\2\2\u00a4\u034b\3\2\2\2\u00a6\u0353\3\2\2\2\u00a8\u035b")
        buf.write("\3\2\2\2\u00aa\u0365\3\2\2\2\u00ac\u036c\3\2\2\2\u00ae")
        buf.write("\u036e\3\2\2\2\u00b0\u037c\3\2\2\2\u00b2\u037e\3\2\2\2")
        buf.write("\u00b4\u0384\3\2\2\2\u00b6\u038d\3\2\2\2\u00b8\u03a1\3")
        buf.write("\2\2\2\u00ba\u03a6\3\2\2\2\u00bc\u03b2\3\2\2\2\u00be\u03c0")
        buf.write("\3\2\2\2\u00c0\u03c2\3\2\2\2\u00c2\u03c4\3\2\2\2\u00c4")
        buf.write("\u03c6\3\2\2\2\u00c6\u03ca\3\2\2\2\u00c8\u03d4\3\2\2\2")
        buf.write("\u00ca\u03d8\3\2\2\2\u00cc\u03dc\3\2\2\2\u00ce\u03e3\3")
        buf.write("\2\2\2\u00d0\u03f1\3\2\2\2\u00d2\u03f3\3\2\2\2\u00d4\u0404")
        buf.write("\3\2\2\2\u00d6\u0406\3\2\2\2\u00d8\u040a\3\2\2\2\u00da")
        buf.write("\u040c\3\2\2\2\u00dc\u041a\3\2\2\2\u00de\u043e\3\2\2\2")
        buf.write("\u00e0\u0440\3\2\2\2\u00e2\u0444\3\2\2\2\u00e4\u0446\3")
        buf.write("\2\2\2\u00e6\u044c\3\2\2\2\u00e8\u0454\3\2\2\2\u00ea\u045c")
        buf.write("\3\2\2\2\u00ec\u0467\3\2\2\2\u00ee\u0469\3\2\2\2\u00f0")
        buf.write("\u0475\3\2\2\2\u00f2\u0477\3\2\2\2\u00f4\u0483\3\2\2\2")
        buf.write("\u00f6\u0485\3\2\2\2\u00f8\u0491\3\2\2\2\u00fa\u0496\3")
        buf.write("\2\2\2\u00fc\u0498\3\2\2\2\u00fe\u04bc\3\2\2\2\u0100\u04c7")
        buf.write("\3\2\2\2\u0102\u04d2\3\2\2\2\u0104\u04d4\3\2\2\2\u0106")
        buf.write("\u04ec\3\2\2\2\u0108\u04f3\3\2\2\2\u010a\u04f8\3\2\2\2")
        buf.write("\u010c\u0500\3\2\2\2\u010e\u0507\3\2\2\2\u0110\u0520\3")
        buf.write("\2\2\2\u0112\u0522\3\2\2\2\u0114\u0524\3\2\2\2\u0116\u052a")
        buf.write("\3\2\2\2\u0118\u052e\3\2\2\2\u011a\u011c\5\4\3\2\u011b")
        buf.write("\u011a\3\2\2\2\u011c\u011f\3\2\2\2\u011d\u011b\3\2\2\2")
        buf.write("\u011d\u011e\3\2\2\2\u011e\u0123\3\2\2\2\u011f\u011d\3")
        buf.write("\2\2\2\u0120\u0122\5\f\7\2\u0121\u0120\3\2\2\2\u0122\u0125")
        buf.write("\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2\u0124")
        buf.write("\u0126\3\2\2\2\u0125\u0123\3\2\2\2\u0126\u0127\7\2\2\3")
        buf.write("\u0127\3\3\2\2\2\u0128\u0129\5\6\4\2\u0129\5\3\2\2\2\u012a")
        buf.write("\u012b\7\3\2\2\u012b\u012c\5\b\5\2\u012c\u012d\7[\2\2")
        buf.write("\u012d\u0130\3\2\2\2\u012e\u0130\7[\2\2\u012f\u012a\3")
        buf.write("\2\2\2\u012f\u012e\3\2\2\2\u0130\7\3\2\2\2\u0131\u0134")
        buf.write("\7c\2\2\u0132\u0134\5\n\6\2\u0133\u0131\3\2\2\2\u0133")
        buf.write("\u0132\3\2\2\2\u0134\t\3\2\2\2\u0135\u0136\b\6\1\2\u0136")
        buf.write("\u0137\7i\2\2\u0137\u013d\3\2\2\2\u0138\u0139\f\3\2\2")
        buf.write("\u0139\u013a\7\4\2\2\u013a\u013c\7i\2\2\u013b\u0138\3")
        buf.write("\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\13\3\2\2\2\u013f\u013d\3\2\2\2\u0140\u014c")
        buf.write("\5\16\b\2\u0141\u014c\5\26\f\2\u0142\u014c\5(\25\2\u0143")
        buf.write("\u014c\5\66\34\2\u0144\u014c\5@!\2\u0145\u014c\5R*\2\u0146")
        buf.write("\u014c\5H%\2\u0147\u014c\5V,\2\u0148\u014c\5Z.\2\u0149")
        buf.write("\u014c\5d\63\2\u014a\u014c\7[\2\2\u014b\u0140\3\2\2\2")
        buf.write("\u014b\u0141\3\2\2\2\u014b\u0142\3\2\2\2\u014b\u0143\3")
        buf.write("\2\2\2\u014b\u0144\3\2\2\2\u014b\u0145\3\2\2\2\u014b\u0146")
        buf.write("\3\2\2\2\u014b\u0147\3\2\2\2\u014b\u0148\3\2\2\2\u014b")
        buf.write("\u0149\3\2\2\2\u014b\u014a\3\2\2\2\u014c\r\3\2\2\2\u014d")
        buf.write("\u014e\7\5\2\2\u014e\u014f\5\20\t\2\u014f\u0150\7\6\2")
        buf.write("\2\u0150\u0151\5\22\n\2\u0151\u0152\7[\2\2\u0152\17\3")
        buf.write("\2\2\2\u0153\u0154\7i\2\2\u0154\21\3\2\2\2\u0155\u0156")
        buf.write("\5\24\13\2\u0156\23\3\2\2\2\u0157\u0158\7\7\2\2\u0158")
        buf.write("\u0159\7^\2\2\u0159\u015a\5\34\17\2\u015a\u015b\7_\2\2")
        buf.write("\u015b\25\3\2\2\2\u015c\u015d\7\b\2\2\u015d\u015e\5\32")
        buf.write("\16\2\u015e\u015f\7\t\2\2\u015f\u0160\5\20\t\2\u0160\u0161")
        buf.write("\7\6\2\2\u0161\u0162\5\30\r\2\u0162\u0163\7[\2\2\u0163")
        buf.write("\27\3\2\2\2\u0164\u0165\5 \21\2\u0165\31\3\2\2\2\u0166")
        buf.write("\u0169\7i\2\2\u0167\u0169\5&\24\2\u0168\u0166\3\2\2\2")
        buf.write("\u0168\u0167\3\2\2\2\u0169\33\3\2\2\2\u016a\u016f\5\36")
        buf.write("\20\2\u016b\u016c\7\n\2\2\u016c\u016e\5\36\20\2\u016d")
        buf.write("\u016b\3\2\2\2\u016e\u0171\3\2\2\2\u016f\u016d\3\2\2\2")
        buf.write("\u016f\u0170\3\2\2\2\u0170\35\3\2\2\2\u0171\u016f\3\2")
        buf.write("\2\2\u0172\u0173\5&\24\2\u0173\u0174\7\13\2\2\u0174\u0175")
        buf.write("\5\u0118\u008d\2\u0175\37\3\2\2\2\u0176\u0177\7\7\2\2")
        buf.write("\u0177\u0178\7^\2\2\u0178\u017b\5\34\17\2\u0179\u017a")
        buf.write("\7\n\2\2\u017a\u017c\5\"\22\2\u017b\u0179\3\2\2\2\u017b")
        buf.write("\u017c\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u017e\7\n\2\2")
        buf.write("\u017e\u0180\5$\23\2\u017f\u017d\3\2\2\2\u017f\u0180\3")
        buf.write("\2\2\2\u0180\u0181\3\2\2\2\u0181\u0182\7_\2\2\u0182!\3")
        buf.write("\2\2\2\u0183\u0184\7\f\2\2\u0184\u0187\7\13\2\2\u0185")
        buf.write("\u0188\7d\2\2\u0186\u0188\5\u0118\u008d\2\u0187\u0185")
        buf.write("\3\2\2\2\u0187\u0186\3\2\2\2\u0188#\3\2\2\2\u0189\u018a")
        buf.write("\7\r\2\2\u018a\u018d\7\13\2\2\u018b\u018e\7d\2\2\u018c")
        buf.write("\u018e\5\u0118\u008d\2\u018d\u018b\3\2\2\2\u018d\u018c")
        buf.write("\3\2\2\2\u018e%\3\2\2\2\u018f\u0190\t\2\2\2\u0190\'\3")
        buf.write("\2\2\2\u0191\u0192\7\26\2\2\u0192\u0193\5.\30\2\u0193")
        buf.write("\u0194\7\13\2\2\u0194\u0195\7\\\2\2\u0195\u019a\5*\26")
        buf.write("\2\u0196\u0197\7\n\2\2\u0197\u0199\5*\26\2\u0198\u0196")
        buf.write("\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u019d\3\2\2\2\u019c\u019a\3\2\2\2")
        buf.write("\u019d\u019e\7]\2\2\u019e\u019f\7[\2\2\u019f)\3\2\2\2")
        buf.write("\u01a0\u01a3\5\60\31\2\u01a1\u01a2\7\27\2\2\u01a2\u01a4")
        buf.write("\5,\27\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4")
        buf.write("+\3\2\2\2\u01a5\u01a6\t\3\2\2\u01a6-\3\2\2\2\u01a7\u01a8")
        buf.write("\7i\2\2\u01a8/\3\2\2\2\u01a9\u01aa\7i\2\2\u01aa\61\3\2")
        buf.write("\2\2\u01ab\u01ac\5.\30\2\u01ac\u01ad\7\30\2\2\u01ad\u01ae")
        buf.write("\5\60\31\2\u01ae\63\3\2\2\2\u01af\u01b0\7^\2\2\u01b0\u01b1")
        buf.write("\5<\37\2\u01b1\u01b4\7\31\2\2\u01b2\u01b5\5\62\32\2\u01b3")
        buf.write("\u01b5\7h\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b3\3\2\2\2")
        buf.write("\u01b5\u01b6\3\2\2\2\u01b6\u01b7\7_\2\2\u01b7\65\3\2\2")
        buf.write("\2\u01b8\u01b9\7\32\2\2\u01b9\u01bb\5> \2\u01ba\u01bc")
        buf.write("\58\35\2\u01bb\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc")
        buf.write("\u01c8\3\2\2\2\u01bd\u01be\7\13\2\2\u01be\u01bf\7[\2\2")
        buf.write("\u01bf\u01c1\7j\2\2\u01c0\u01c2\5:\36\2\u01c1\u01c0\3")
        buf.write("\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c3\u01c4")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c6\7k\2\2\u01c6")
        buf.write("\u01c9\3\2\2\2\u01c7\u01c9\7[\2\2\u01c8\u01bd\3\2\2\2")
        buf.write("\u01c8\u01c7\3\2\2\2\u01c9\67\3\2\2\2\u01ca\u01cb\7\33")
        buf.write("\2\2\u01cb\u01cd\5> \2\u01cc\u01ce\5\64\33\2\u01cd\u01cc")
        buf.write("\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce9\3\2\2\2\u01cf\u01d5")
        buf.write("\5r:\2\u01d0\u01d5\5\u008eH\2\u01d1\u01d5\5\u009cO\2\u01d2")
        buf.write("\u01d5\5\u00ceh\2\u01d3\u01d5\5\u00d8m\2\u01d4\u01cf\3")
        buf.write("\2\2\2\u01d4\u01d0\3\2\2\2\u01d4\u01d1\3\2\2\2\u01d4\u01d2")
        buf.write("\3\2\2\2\u01d4\u01d3\3\2\2\2\u01d5;\3\2\2\2\u01d6\u01d7")
        buf.write("\7i\2\2\u01d7=\3\2\2\2\u01d8\u01d9\7i\2\2\u01d9?\3\2\2")
        buf.write("\2\u01da\u01db\7\34\2\2\u01db\u01dd\5F$\2\u01dc\u01de")
        buf.write("\5B\"\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2\2\2\u01de")
        buf.write("\u01ea\3\2\2\2\u01df\u01e0\7\13\2\2\u01e0\u01e1\7[\2\2")
        buf.write("\u01e1\u01e3\7j\2\2\u01e2\u01e4\5D#\2\u01e3\u01e2\3\2")
        buf.write("\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6")
        buf.write("\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8\7k\2\2\u01e8")
        buf.write("\u01eb\3\2\2\2\u01e9\u01eb\7[\2\2\u01ea\u01df\3\2\2\2")
        buf.write("\u01ea\u01e9\3\2\2\2\u01ebA\3\2\2\2\u01ec\u01ed\7\33\2")
        buf.write("\2\u01ed\u01ef\5F$\2\u01ee\u01f0\5\64\33\2\u01ef\u01ee")
        buf.write("\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0C\3\2\2\2\u01f1\u01f7")
        buf.write("\5r:\2\u01f2\u01f7\5\u008eH\2\u01f3\u01f7\5\u009cO\2\u01f4")
        buf.write("\u01f7\5\u00ceh\2\u01f5\u01f7\5\u00d8m\2\u01f6\u01f1\3")
        buf.write("\2\2\2\u01f6\u01f2\3\2\2\2\u01f6\u01f3\3\2\2\2\u01f6\u01f4")
        buf.write("\3\2\2\2\u01f6\u01f5\3\2\2\2\u01f7E\3\2\2\2\u01f8\u01f9")
        buf.write("\7i\2\2\u01f9G\3\2\2\2\u01fa\u01fb\7\35\2\2\u01fb\u01fd")
        buf.write("\5N(\2\u01fc\u01fe\5J&\2\u01fd\u01fc\3\2\2\2\u01fd\u01fe")
        buf.write("\3\2\2\2\u01fe\u020b\3\2\2\2\u01ff\u0200\7\13\2\2\u0200")
        buf.write("\u0201\7[\2\2\u0201\u0204\7j\2\2\u0202\u0205\5L\'\2\u0203")
        buf.write("\u0205\5\u00acW\2\u0204\u0202\3\2\2\2\u0204\u0203\3\2")
        buf.write("\2\2\u0205\u0206\3\2\2\2\u0206\u0204\3\2\2\2\u0206\u0207")
        buf.write("\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209\7k\2\2\u0209")
        buf.write("\u020c\3\2\2\2\u020a\u020c\7[\2\2\u020b\u01ff\3\2\2\2")
        buf.write("\u020b\u020a\3\2\2\2\u020cI\3\2\2\2\u020d\u020e\7\33\2")
        buf.write("\2\u020e\u0210\5N(\2\u020f\u0211\5\64\33\2\u0210\u020f")
        buf.write("\3\2\2\2\u0210\u0211\3\2\2\2\u0211K\3\2\2\2\u0212\u0219")
        buf.write("\5r:\2\u0213\u0219\5\u008eH\2\u0214\u0219\5\u009cO\2\u0215")
        buf.write("\u0219\5\u00ceh\2\u0216\u0219\5\u00d8m\2\u0217\u0219\5")
        buf.write("\u00a8U\2\u0218\u0212\3\2\2\2\u0218\u0213\3\2\2\2\u0218")
        buf.write("\u0214\3\2\2\2\u0218\u0215\3\2\2\2\u0218\u0216\3\2\2\2")
        buf.write("\u0218\u0217\3\2\2\2\u0219M\3\2\2\2\u021a\u021b\5F$\2")
        buf.write("\u021b\u021c\7\4\2\2\u021c\u021e\3\2\2\2\u021d\u021a\3")
        buf.write("\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0220")
        buf.write("\5P)\2\u0220O\3\2\2\2\u0221\u0222\7i\2\2\u0222Q\3\2\2")
        buf.write("\2\u0223\u0224\7\36\2\2\u0224\u0226\5N(\2\u0225\u0227")
        buf.write("\5T+\2\u0226\u0225\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0234")
        buf.write("\3\2\2\2\u0228\u0229\7\13\2\2\u0229\u022a\7[\2\2\u022a")
        buf.write("\u022d\7j\2\2\u022b\u022e\5L\'\2\u022c\u022e\5\u00acW")
        buf.write("\2\u022d\u022b\3\2\2\2\u022d\u022c\3\2\2\2\u022e\u022f")
        buf.write("\3\2\2\2\u022f\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230")
        buf.write("\u0231\3\2\2\2\u0231\u0232\7k\2\2\u0232\u0235\3\2\2\2")
        buf.write("\u0233\u0235\7[\2\2\u0234\u0228\3\2\2\2\u0234\u0233\3")
        buf.write("\2\2\2\u0235S\3\2\2\2\u0236\u0237\7\33\2\2\u0237\u0239")
        buf.write("\5N(\2\u0238\u023a\5\64\33\2\u0239\u0238\3\2\2\2\u0239")
        buf.write("\u023a\3\2\2\2\u023aU\3\2\2\2\u023b\u023f\7\37\2\2\u023c")
        buf.write("\u023d\5F$\2\u023d\u023e\7\4\2\2\u023e\u0240\3\2\2\2\u023f")
        buf.write("\u023c\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\3\2\2\2")
        buf.write("\u0241\u0244\5X-\2\u0242\u0243\7\t\2\2\u0243\u0245\5N")
        buf.write("(\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0251")
        buf.write("\3\2\2\2\u0246\u0247\7\13\2\2\u0247\u0248\7[\2\2\u0248")
        buf.write("\u024a\7j\2\2\u0249\u024b\5L\'\2\u024a\u0249\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024c\u024a\3\2\2\2\u024c\u024d\3\2\2\2")
        buf.write("\u024d\u024e\3\2\2\2\u024e\u024f\7k\2\2\u024f\u0252\3")
        buf.write("\2\2\2\u0250\u0252\7[\2\2\u0251\u0246\3\2\2\2\u0251\u0250")
        buf.write("\3\2\2\2\u0252W\3\2\2\2\u0253\u0254\7i\2\2\u0254Y\3\2")
        buf.write("\2\2\u0255\u0258\5\\/\2\u0256\u0258\5^\60\2\u0257\u0255")
        buf.write("\3\2\2\2\u0257\u0256\3\2\2\2\u0258[\3\2\2\2\u0259\u025a")
        buf.write("\7 \2\2\u025a\u025b\5.\30\2\u025b\u025c\7\13\2\2\u025c")
        buf.write("\u025d\7\\\2\2\u025d\u0262\5*\26\2\u025e\u025f\7\n\2\2")
        buf.write("\u025f\u0261\5*\26\2\u0260\u025e\3\2\2\2\u0261\u0264\3")
        buf.write("\2\2\2\u0262\u0260\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265")
        buf.write("\3\2\2\2\u0264\u0262\3\2\2\2\u0265\u0266\7]\2\2\u0266")
        buf.write("\u0267\7[\2\2\u0267]\3\2\2\2\u0268\u0269\7 \2\2\u0269")
        buf.write("\u026a\5`\61\2\u026a\u026b\7\13\2\2\u026b\u026c\7[\2\2")
        buf.write("\u026c\u026e\7j\2\2\u026d\u026f\5b\62\2\u026e\u026d\3")
        buf.write("\2\2\2\u026f\u0270\3\2\2\2\u0270\u026e\3\2\2\2\u0270\u0271")
        buf.write("\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0273\7k\2\2\u0273")
        buf.write("_\3\2\2\2\u0274\u0277\5p9\2\u0275\u0277\5N(\2\u0276\u0274")
        buf.write("\3\2\2\2\u0276\u0275\3\2\2\2\u0277a\3\2\2\2\u0278\u027d")
        buf.write("\5:\36\2\u0279\u027d\5D#\2\u027a\u027d\5L\'\2\u027b\u027d")
        buf.write("\5\u00acW\2\u027c\u0278\3\2\2\2\u027c\u0279\3\2\2\2\u027c")
        buf.write("\u027a\3\2\2\2\u027c\u027b\3\2\2\2\u027dc\3\2\2\2\u027e")
        buf.write("\u027f\7!\2\2\u027f\u0284\5<\37\2\u0280\u0281\7\n\2\2")
        buf.write("\u0281\u0283\5<\37\2\u0282\u0280\3\2\2\2\u0283\u0286\3")
        buf.write("\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0287")
        buf.write("\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u0288\7\13\2\2\u0288")
        buf.write("\u028b\5f\64\2\u0289\u028a\7\27\2\2\u028a\u028c\5\u0096")
        buf.write("L\2\u028b\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u028f")
        buf.write("\3\2\2\2\u028d\u0290\5\u0098M\2\u028e\u0290\7[\2\2\u028f")
        buf.write("\u028d\3\2\2\2\u028f\u028e\3\2\2\2\u0290e\3\2\2\2\u0291")
        buf.write("\u0294\5h\65\2\u0292\u0294\5j\66\2\u0293\u0291\3\2\2\2")
        buf.write("\u0293\u0292\3\2\2\2\u0294g\3\2\2\2\u0295\u0299\5n8\2")
        buf.write("\u0296\u0299\5p9\2\u0297\u0299\5N(\2\u0298\u0295\3\2\2")
        buf.write("\2\u0298\u0296\3\2\2\2\u0298\u0297\3\2\2\2\u0299i\3\2")
        buf.write("\2\2\u029a\u029b\5l\67\2\u029bk\3\2\2\2\u029c\u029d\7")
        buf.write("\"\2\2\u029d\u029e\7\t\2\2\u029e\u029f\5h\65\2\u029fm")
        buf.write("\3\2\2\2\u02a0\u02a1\t\4\2\2\u02a1o\3\2\2\2\u02a2\u02a3")
        buf.write("\7i\2\2\u02a3q\3\2\2\2\u02a4\u02a5\7(\2\2\u02a5\u02aa")
        buf.write("\5|?\2\u02a6\u02a7\7^\2\2\u02a7\u02a8\5\u010a\u0086\2")
        buf.write("\u02a8\u02a9\7_\2\2\u02a9\u02ab\3\2\2\2\u02aa\u02a6\3")
        buf.write("\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ae\3\2\2\2\u02ac\u02ad")
        buf.write("\7\6\2\2\u02ad\u02af\5t;\2\u02ae\u02ac\3\2\2\2\u02ae\u02af")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\7[\2\2\u02b1")
        buf.write("s\3\2\2\2\u02b2\u02b8\5v<\2\u02b3\u02b5\5x=\2\u02b4\u02b3")
        buf.write("\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6")
        buf.write("\u02b7\7)\2\2\u02b7\u02b9\5\u0080A\2\u02b8\u02b4\3\2\2")
        buf.write("\2\u02b8\u02b9\3\2\2\2\u02b9\u02bc\3\2\2\2\u02ba\u02bc")
        buf.write("\5\u0080A\2\u02bb\u02b2\3\2\2\2\u02bb\u02ba\3\2\2\2\u02bc")
        buf.write("u\3\2\2\2\u02bd\u02be\7*\2\2\u02be\u02bf\5~@\2\u02bfw")
        buf.write("\3\2\2\2\u02c0\u02c1\7+\2\2\u02c1\u02c2\5z>\2\u02c2y\3")
        buf.write("\2\2\2\u02c3\u02c4\7i\2\2\u02c4{\3\2\2\2\u02c5\u02c6\7")
        buf.write("i\2\2\u02c6}\3\2\2\2\u02c7\u02c8\5\u00e2r\2\u02c8\u02c9")
        buf.write("\7\4\2\2\u02c9\u02cb\3\2\2\2\u02ca\u02c7\3\2\2\2\u02ca")
        buf.write("\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\5|?\2\u02cd")
        buf.write("\177\3\2\2\2\u02ce\u02d4\5\u008aF\2\u02cf\u02d4\5\u0082")
        buf.write("B\2\u02d0\u02d4\5\u0084C\2\u02d1\u02d4\5\u0086D\2\u02d2")
        buf.write("\u02d4\5\u0088E\2\u02d3\u02ce\3\2\2\2\u02d3\u02cf\3\2")
        buf.write("\2\2\u02d3\u02d0\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d2")
        buf.write("\3\2\2\2\u02d4\u0081\3\2\2\2\u02d5\u02d6\7,\2\2\u02d6")
        buf.write("\u02d7\7^\2\2\u02d7\u02d8\5\u008aF\2\u02d8\u02d9\7_\2")
        buf.write("\2\u02d9\u0083\3\2\2\2\u02da\u02db\7-\2\2\u02db\u02dc")
        buf.write("\7^\2\2\u02dc\u02dd\5\u008aF\2\u02dd\u02de\7_\2\2\u02de")
        buf.write("\u0085\3\2\2\2\u02df\u02e0\7.\2\2\u02e0\u02e1\7^\2\2\u02e1")
        buf.write("\u02e2\5\u008cG\2\u02e2\u02e3\7_\2\2\u02e3\u0087\3\2\2")
        buf.write("\2\u02e4\u02e5\7/\2\2\u02e5\u02e6\7^\2\2\u02e6\u02ec\5")
        buf.write("\u008cG\2\u02e7\u02e8\7\n\2\2\u02e8\u02e9\7i\2\2\u02e9")
        buf.write("\u02ea\bE\1\2\u02ea\u02eb\7\13\2\2\u02eb\u02ed\5\u008c")
        buf.write("G\2\u02ec\u02e7\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee")
        buf.write("\3\2\2\2\u02ee\u02ef\7_\2\2\u02ef\u0089\3\2\2\2\u02f0")
        buf.write("\u02f1\5\u00e2r\2\u02f1\u008b\3\2\2\2\u02f2\u02f3\5\u00e2")
        buf.write("r\2\u02f3\u008d\3\2\2\2\u02f4\u02f7\5\u0090I\2\u02f5\u02f7")
        buf.write("\5\u0092J\2\u02f6\u02f4\3\2\2\2\u02f6\u02f5\3\2\2\2\u02f7")
        buf.write("\u008f\3\2\2\2\u02f8\u02fd\5<\37\2\u02f9\u02fa\7\n\2\2")
        buf.write("\u02fa\u02fc\5<\37\2\u02fb\u02f9\3\2\2\2\u02fc\u02ff\3")
        buf.write("\2\2\2\u02fd\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0300")
        buf.write("\3\2\2\2\u02ff\u02fd\3\2\2\2\u0300\u0301\7\13\2\2\u0301")
        buf.write("\u0304\5f\64\2\u0302\u0303\7\27\2\2\u0303\u0305\5\u0096")
        buf.write("L\2\u0304\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0308")
        buf.write("\3\2\2\2\u0306\u0309\5\u0098M\2\u0307\u0309\7[\2\2\u0308")
        buf.write("\u0306\3\2\2\2\u0308\u0307\3\2\2\2\u0309\u0091\3\2\2\2")
        buf.write("\u030a\u030b\7\60\2\2\u030b\u0310\5<\37\2\u030c\u030d")
        buf.write("\7\n\2\2\u030d\u030f\5<\37\2\u030e\u030c\3\2\2\2\u030f")
        buf.write("\u0312\3\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2")
        buf.write("\u0311\u0313\3\2\2\2\u0312\u0310\3\2\2\2\u0313\u0314\7")
        buf.write("\13\2\2\u0314\u031a\5f\64\2\u0315\u0318\7\27\2\2\u0316")
        buf.write("\u0319\5\u0094K\2\u0317\u0319\5\u0102\u0082\2\u0318\u0316")
        buf.write("\3\2\2\2\u0318\u0317\3\2\2\2\u0319\u031b\3\2\2\2\u031a")
        buf.write("\u0315\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c\3\2\2\2")
        buf.write("\u031c\u031d\7[\2\2\u031d\u0093\3\2\2\2\u031e\u031f\7")
        buf.write("\61\2\2\u031f\u0320\7^\2\2\u0320\u0321\5\u00e2r\2\u0321")
        buf.write("\u0322\7\n\2\2\u0322\u0325\5t;\2\u0323\u0324\7\n\2\2\u0324")
        buf.write("\u0326\5\u0096L\2\u0325\u0323\3\2\2\2\u0325\u0326\3\2")
        buf.write("\2\2\u0326\u0327\3\2\2\2\u0327\u0328\7_\2\2\u0328\u0095")
        buf.write("\3\2\2\2\u0329\u032a\5\u00e2r\2\u032a\u0097\3\2\2\2\u032b")
        buf.write("\u032c\7\62\2\2\u032c\u032d\7\13\2\2\u032d\u032e\7[\2")
        buf.write("\2\u032e\u0330\7j\2\2\u032f\u0331\5\u009aN\2\u0330\u032f")
        buf.write("\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0330\3\2\2\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0335\7k\2\2")
        buf.write("\u0335\u0099\3\2\2\2\u0336\u0339\5\u009cO\2\u0337\u0339")
        buf.write("\5\u00d8m\2\u0338\u0336\3\2\2\2\u0338\u0337\3\2\2\2\u0339")
        buf.write("\u009b\3\2\2\2\u033a\u033d\5\u009eP\2\u033b\u033d\5\u00a4")
        buf.write("S\2\u033c\u033a\3\2\2\2\u033c\u033b\3\2\2\2\u033d\u009d")
        buf.write("\3\2\2\2\u033e\u033f\7\63\2\2\u033f\u0341\7^\2\2\u0340")
        buf.write("\u0342\5\u00a0Q\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2")
        buf.write("\2\2\u0342\u0343\3\2\2\2\u0343\u0344\5\u00a2R\2\u0344")
        buf.write("\u0345\7_\2\2\u0345\u0346\7[\2\2\u0346\u009f\3\2\2\2\u0347")
        buf.write("\u0348\t\5\2\2\u0348\u00a1\3\2\2\2\u0349\u034a\5\u00e2")
        buf.write("r\2\u034a\u00a3\3\2\2\2\u034b\u034c\7\66\2\2\u034c\u034d")
        buf.write("\7^\2\2\u034d\u034e\5\u00a6T\2\u034e\u034f\7_\2\2\u034f")
        buf.write("\u0350\7[\2\2\u0350\u00a5\3\2\2\2\u0351\u0354\5<\37\2")
        buf.write("\u0352\u0354\5\u00fe\u0080\2\u0353\u0351\3\2\2\2\u0353")
        buf.write("\u0352\3\2\2\2\u0354\u00a7\3\2\2\2\u0355\u0358\5\u00aa")
        buf.write("V\2\u0356\u0358\5\u00c2b\2\u0357\u0355\3\2\2\2\u0357\u0356")
        buf.write("\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a\7\4\2\2\u035a")
        buf.write("\u035c\3\2\2\2\u035b\u0357\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035c\u035d\3\2\2\2\u035d\u035e\5X-\2\u035e\u0360\7^")
        buf.write("\2\2\u035f\u0361\5\u0110\u0089\2\u0360\u035f\3\2\2\2\u0360")
        buf.write("\u0361\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0363\7_\2\2")
        buf.write("\u0363\u0364\7[\2\2\u0364\u00a9\3\2\2\2\u0365\u0366\5")
        buf.write("\u00c2b\2\u0366\u0367\7\4\2\2\u0367\u0368\3\2\2\2\u0368")
        buf.write("\u0369\5P)\2\u0369\u00ab\3\2\2\2\u036a\u036d\5\u00aeX")
        buf.write("\2\u036b\u036d\5\u00b2Z\2\u036c\u036a\3\2\2\2\u036c\u036b")
        buf.write("\3\2\2\2\u036d\u00ad\3\2\2\2\u036e\u036f\7\67\2\2\u036f")
        buf.write("\u0370\5t;\2\u0370\u0371\7\13\2\2\u0371\u0372\7[\2\2\u0372")
        buf.write("\u0374\7j\2\2\u0373\u0375\5\u00b0Y\2\u0374\u0373\3\2\2")
        buf.write("\2\u0375\u0376\3\2\2\2\u0376\u0374\3\2\2\2\u0376\u0377")
        buf.write("\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379\7k\2\2\u0379")
        buf.write("\u00af\3\2\2\2\u037a\u037d\5\u00c8e\2\u037b\u037d\5\u00c6")
        buf.write("d\2\u037c\u037a\3\2\2\2\u037c\u037b\3\2\2\2\u037d\u00b1")
        buf.write("\3\2\2\2\u037e\u037f\78\2\2\u037f\u0380\5\u00b4[\2\u0380")
        buf.write("\u00b3\3\2\2\2\u0381\u0382\5\u00c0a\2\u0382\u0383\7\13")
        buf.write("\2\2\u0383\u0385\3\2\2\2\u0384\u0381\3\2\2\2\u0384\u0385")
        buf.write("\3\2\2\2\u0385\u038b\3\2\2\2\u0386\u038c\5\u00b6\\\2\u0387")
        buf.write("\u038c\5\u00ba^\2\u0388\u038c\5\u00c4c\2\u0389\u038c\5")
        buf.write("\u00c6d\2\u038a\u038c\5\u00c8e\2\u038b\u0386\3\2\2\2\u038b")
        buf.write("\u0387\3\2\2\2\u038b\u0388\3\2\2\2\u038b\u0389\3\2\2\2")
        buf.write("\u038b\u038a\3\2\2\2\u038c\u00b5\3\2\2\2\u038d\u0393\5")
        buf.write("\u00b8]\2\u038e\u0390\7^\2\2\u038f\u0391\5\u0110\u0089")
        buf.write("\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0392")
        buf.write("\3\2\2\2\u0392\u0394\7_\2\2\u0393\u038e\3\2\2\2\u0393")
        buf.write("\u0394\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0396\7\13\2")
        buf.write("\2\u0396\u0397\7[\2\2\u0397\u0399\7j\2\2\u0398\u039a\5")
        buf.write("\u00b4[\2\u0399\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b")
        buf.write("\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039d\3\2\2\2")
        buf.write("\u039d\u039f\7k\2\2\u039e\u03a0\5\u00bc_\2\u039f\u039e")
        buf.write("\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u00b7\3\2\2\2\u03a1")
        buf.write("\u03a2\t\6\2\2\u03a2\u00b9\3\2\2\2\u03a3\u03a4\5\u00c2")
        buf.write("b\2\u03a4\u03a5\7\4\2\2\u03a5\u03a7\3\2\2\2\u03a6\u03a3")
        buf.write("\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8")
        buf.write("\u03a9\5P)\2\u03a9\u03ab\7^\2\2\u03aa\u03ac\5\u0110\u0089")
        buf.write("\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad")
        buf.write("\3\2\2\2\u03ad\u03b0\7_\2\2\u03ae\u03b1\5\u00bc_\2\u03af")
        buf.write("\u03b1\7[\2\2\u03b0\u03ae\3\2\2\2\u03b0\u03af\3\2\2\2")
        buf.write("\u03b1\u00bb\3\2\2\2\u03b2\u03b3\7\62\2\2\u03b3\u03b4")
        buf.write("\7\13\2\2\u03b4\u03b5\7[\2\2\u03b5\u03b7\7j\2\2\u03b6")
        buf.write("\u03b8\5\u00be`\2\u03b7\u03b6\3\2\2\2\u03b8\u03b9\3\2")
        buf.write("\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bb")
        buf.write("\3\2\2\2\u03bb\u03bc\7k\2\2\u03bc\u00bd\3\2\2\2\u03bd")
        buf.write("\u03c1\5\u009cO\2\u03be\u03c1\5\u00a8U\2\u03bf\u03c1\5")
        buf.write("\u00caf\2\u03c0\u03bd\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0")
        buf.write("\u03bf\3\2\2\2\u03c1\u00bf\3\2\2\2\u03c2\u03c3\7i\2\2")
        buf.write("\u03c3\u00c1\3\2\2\2\u03c4\u03c5\5F$\2\u03c5\u00c3\3\2")
        buf.write("\2\2\u03c6\u03c7\7<\2\2\u03c7\u03c8\5t;\2\u03c8\u03c9")
        buf.write("\7[\2\2\u03c9\u00c5\3\2\2\2\u03ca\u03cb\7=\2\2\u03cb\u03d0")
        buf.write("\5|?\2\u03cc\u03cd\7^\2\2\u03cd\u03ce\5\u0110\u0089\2")
        buf.write("\u03ce\u03cf\7_\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03cc\3")
        buf.write("\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3")
        buf.write("\7[\2\2\u03d3\u00c7\3\2\2\2\u03d4\u03d5\7>\2\2\u03d5\u03d6")
        buf.write("\5\u00ccg\2\u03d6\u03d7\7[\2\2\u03d7\u00c9\3\2\2\2\u03d8")
        buf.write("\u03d9\7?\2\2\u03d9\u03da\5t;\2\u03da\u03db\7[\2\2\u03db")
        buf.write("\u00cb\3\2\2\2\u03dc\u03dd\5\u00fc\177\2\u03dd\u03df\7")
        buf.write("^\2\2\u03de\u03e0\5\u0110\u0089\2\u03df\u03de\3\2\2\2")
        buf.write("\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\7")
        buf.write("_\2\2\u03e2\u00cd\3\2\2\2\u03e3\u03e4\7@\2\2\u03e4\u03e5")
        buf.write("\5\u00d6l\2\u03e5\u03e7\7^\2\2\u03e6\u03e8\5\u010a\u0086")
        buf.write("\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9")
        buf.write("\3\2\2\2\u03e9\u03ec\7_\2\2\u03ea\u03eb\7A\2\2\u03eb\u03ed")
        buf.write("\5\u00d0i\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03ee\u03ef\5\u00d2j\2\u03ef\u03f0\7[\2")
        buf.write("\2\u03f0\u00cf\3\2\2\2\u03f1\u03f2\5f\64\2\u03f2\u00d1")
        buf.write("\3\2\2\2\u03f3\u03f5\7\6\2\2\u03f4\u03f6\5\u00d4k\2\u03f5")
        buf.write("\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u0402\3\2\2\2")
        buf.write("\u03f7\u03f8\7B\2\2\u03f8\u0403\5\u00e2r\2\u03f9\u0403")
        buf.write("\7C\2\2\u03fa\u03fb\7D\2\2\u03fb\u03fc\5\n\6\2\u03fc\u03fe")
        buf.write("\7^\2\2\u03fd\u03ff\5\u0110\u0089\2\u03fe\u03fd\3\2\2")
        buf.write("\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0401")
        buf.write("\7_\2\2\u0401\u0403\3\2\2\2\u0402\u03f7\3\2\2\2\u0402")
        buf.write("\u03f9\3\2\2\2\u0402\u03fa\3\2\2\2\u0403\u00d3\3\2\2\2")
        buf.write("\u0404\u0405\7E\2\2\u0405\u00d5\3\2\2\2\u0406\u0407\7")
        buf.write("i\2\2\u0407\u00d7\3\2\2\2\u0408\u040b\5\u00dan\2\u0409")
        buf.write("\u040b\5\u00dco\2\u040a\u0408\3\2\2\2\u040a\u0409\3\2")
        buf.write("\2\2\u040b\u00d9\3\2\2\2\u040c\u040d\7F\2\2\u040d\u040f")
        buf.write("\7^\2\2\u040e\u0410\5\u00e0q\2\u040f\u040e\3\2\2\2\u040f")
        buf.write("\u0410\3\2\2\2\u0410\u0414\3\2\2\2\u0411\u0413\5\u00de")
        buf.write("p\2\u0412\u0411\3\2\2\2\u0413\u0416\3\2\2\2\u0414\u0412")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0417\3\2\2\2\u0416")
        buf.write("\u0414\3\2\2\2\u0417\u0418\7_\2\2\u0418\u0419\7[\2\2\u0419")
        buf.write("\u00db\3\2\2\2\u041a\u041b\7G\2\2\u041b\u041d\7^\2\2\u041c")
        buf.write("\u041e\5\u00e0q\2\u041d\u041c\3\2\2\2\u041d\u041e\3\2")
        buf.write("\2\2\u041e\u0422\3\2\2\2\u041f\u0421\5\u00dep\2\u0420")
        buf.write("\u041f\3\2\2\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2")
        buf.write("\u0422\u0423\3\2\2\2\u0423\u0425\3\2\2\2\u0424\u0422\3")
        buf.write("\2\2\2\u0425\u0426\7_\2\2\u0426\u0427\7[\2\2\u0427\u00dd")
        buf.write("\3\2\2\2\u0428\u0429\7\n\2\2\u0429\u042a\7B\2\2\u042a")
        buf.write("\u042b\7\13\2\2\u042b\u043f\5\u00e2r\2\u042c\u042d\7\n")
        buf.write("\2\2\u042d\u042e\7\b\2\2\u042e\u042f\7\13\2\2\u042f\u043f")
        buf.write("\5\32\16\2\u0430\u0431\7\n\2\2\u0431\u0432\7H\2\2\u0432")
        buf.write("\u0433\7\13\2\2\u0433\u043f\5\u0106\u0084\2\u0434\u0435")
        buf.write("\7\n\2\2\u0435\u0436\7/\2\2\u0436\u0437\7\13\2\2\u0437")
        buf.write("\u043f\5\u0102\u0082\2\u0438\u0439\7\n\2\2\u0439\u043a")
        buf.write("\7(\2\2\u043a\u043b\7\13\2\2\u043b\u043f\5|?\2\u043c\u043d")
        buf.write("\7\n\2\2\u043d\u043f\5\u0114\u008b\2\u043e\u0428\3\2\2")
        buf.write("\2\u043e\u042c\3\2\2\2\u043e\u0430\3\2\2\2\u043e\u0434")
        buf.write("\3\2\2\2\u043e\u0438\3\2\2\2\u043e\u043c\3\2\2\2\u043f")
        buf.write("\u00df\3\2\2\2\u0440\u0441\7i\2\2\u0441\u00e1\3\2\2\2")
        buf.write("\u0442\u0445\5\u00e6t\2\u0443\u0445\5\u00e4s\2\u0444\u0442")
        buf.write("\3\2\2\2\u0444\u0443\3\2\2\2\u0445\u00e3\3\2\2\2\u0446")
        buf.write("\u0447\5\u00e6t\2\u0447\u0448\7I\2\2\u0448\u0449\5\u00e2")
        buf.write("r\2\u0449\u044a\7\13\2\2\u044a\u044b\5\u00e2r\2\u044b")
        buf.write("\u00e5\3\2\2\2\u044c\u0451\5\u00e8u\2\u044d\u044e\7J\2")
        buf.write("\2\u044e\u0450\5\u00e8u\2\u044f\u044d\3\2\2\2\u0450\u0453")
        buf.write("\3\2\2\2\u0451\u044f\3\2\2\2\u0451\u0452\3\2\2\2\u0452")
        buf.write("\u00e7\3\2\2\2\u0453\u0451\3\2\2\2\u0454\u0459\5\u00ea")
        buf.write("v\2\u0455\u0456\7K\2\2\u0456\u0458\5\u00eav\2\u0457\u0455")
        buf.write("\3\2\2\2\u0458\u045b\3\2\2\2\u0459\u0457\3\2\2\2\u0459")
        buf.write("\u045a\3\2\2\2\u045a\u00e9\3\2\2\2\u045b\u0459\3\2\2\2")
        buf.write("\u045c\u0461\5\u00ecw\2\u045d\u045e\7L\2\2\u045e\u0460")
        buf.write("\5\u00ecw\2\u045f\u045d\3\2\2\2\u0460\u0463\3\2\2\2\u0461")
        buf.write("\u045f\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u00eb\3\2\2\2")
        buf.write("\u0463\u0461\3\2\2\2\u0464\u0465\7M\2\2\u0465\u0468\5")
        buf.write("\u00ecw\2\u0466\u0468\5\u00eex\2\u0467\u0464\3\2\2\2\u0467")
        buf.write("\u0466\3\2\2\2\u0468\u00ed\3\2\2\2\u0469\u046a\bx\1\2")
        buf.write("\u046a\u046b\5\u00f2z\2\u046b\u0472\3\2\2\2\u046c\u046d")
        buf.write("\f\3\2\2\u046d\u046e\5\u00f0y\2\u046e\u046f\5\u00f2z\2")
        buf.write("\u046f\u0471\3\2\2\2\u0470\u046c\3\2\2\2\u0471\u0474\3")
        buf.write("\2\2\2\u0472\u0470\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u00ef")
        buf.write("\3\2\2\2\u0474\u0472\3\2\2\2\u0475\u0476\t\7\2\2\u0476")
        buf.write("\u00f1\3\2\2\2\u0477\u0478\bz\1\2\u0478\u0479\5\u00f6")
        buf.write("|\2\u0479\u0480\3\2\2\2\u047a\u047b\f\3\2\2\u047b\u047c")
        buf.write("\5\u00f4{\2\u047c\u047d\5\u00f6|\2\u047d\u047f\3\2\2\2")
        buf.write("\u047e\u047a\3\2\2\2\u047f\u0482\3\2\2\2\u0480\u047e\3")
        buf.write("\2\2\2\u0480\u0481\3\2\2\2\u0481\u00f3\3\2\2\2\u0482\u0480")
        buf.write("\3\2\2\2\u0483\u0484\t\b\2\2\u0484\u00f5\3\2\2\2\u0485")
        buf.write("\u0486\b|\1\2\u0486\u0487\5\u00fa~\2\u0487\u048e\3\2\2")
        buf.write("\2\u0488\u0489\f\3\2\2\u0489\u048a\5\u00f8}\2\u048a\u048b")
        buf.write("\5\u00fa~\2\u048b\u048d\3\2\2\2\u048c\u0488\3\2\2\2\u048d")
        buf.write("\u0490\3\2\2\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2")
        buf.write("\u048f\u00f7\3\2\2\2\u0490\u048e\3\2\2\2\u0491\u0492\t")
        buf.write("\t\2\2\u0492\u00f9\3\2\2\2\u0493\u0497\5\u00fc\177\2\u0494")
        buf.write("\u0495\7U\2\2\u0495\u0497\5\u00fa~\2\u0496\u0493\3\2\2")
        buf.write("\2\u0496\u0494\3\2\2\2\u0497\u00fb\3\2\2\2\u0498\u0499")
        buf.write("\b\177\1\2\u0499\u049a\5\u0100\u0081\2\u049a\u04b9\3\2")
        buf.write("\2\2\u049b\u049c\f\7\2\2\u049c\u049d\7\4\2\2\u049d\u049e")
        buf.write("\7+\2\2\u049e\u049f\7^\2\2\u049f\u04a0\5f\64\2\u04a0\u04a1")
        buf.write("\7_\2\2\u04a1\u04b8\3\2\2\2\u04a2\u04a3\f\6\2\2\u04a3")
        buf.write("\u04a4\7\4\2\2\u04a4\u04a5\7\6\2\2\u04a5\u04a6\7^\2\2")
        buf.write("\u04a6\u04a7\5f\64\2\u04a7\u04a8\7_\2\2\u04a8\u04b8\3")
        buf.write("\2\2\2\u04a9\u04aa\f\5\2\2\u04aa\u04ab\7\\\2\2\u04ab\u04ac")
        buf.write("\5\u00e2r\2\u04ac\u04ad\7]\2\2\u04ad\u04b8\3\2\2\2\u04ae")
        buf.write("\u04af\f\4\2\2\u04af\u04b1\7^\2\2\u04b0\u04b2\5\u0110")
        buf.write("\u0089\2\u04b1\u04b0\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2")
        buf.write("\u04b3\3\2\2\2\u04b3\u04b8\7_\2\2\u04b4\u04b5\f\3\2\2")
        buf.write("\u04b5\u04b6\7\4\2\2\u04b6\u04b8\5<\37\2\u04b7\u049b\3")
        buf.write("\2\2\2\u04b7\u04a2\3\2\2\2\u04b7\u04a9\3\2\2\2\u04b7\u04ae")
        buf.write("\3\2\2\2\u04b7\u04b4\3\2\2\2\u04b8\u04bb\3\2\2\2\u04b9")
        buf.write("\u04b7\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u00fd\3\2\2\2")
        buf.write("\u04bb\u04b9\3\2\2\2\u04bc\u04bd\5\u00fc\177\2\u04bd\u04be")
        buf.write("\7\4\2\2\u04be\u04bf\5<\37\2\u04bf\u00ff\3\2\2\2\u04c0")
        buf.write("\u04c8\5\u0102\u0082\2\u04c1\u04c8\7Y\2\2\u04c2\u04c8")
        buf.write("\7i\2\2\u04c3\u04c4\7^\2\2\u04c4\u04c5\5\u00e2r\2\u04c5")
        buf.write("\u04c6\7_\2\2\u04c6\u04c8\3\2\2\2\u04c7\u04c0\3\2\2\2")
        buf.write("\u04c7\u04c1\3\2\2\2\u04c7\u04c2\3\2\2\2\u04c7\u04c3\3")
        buf.write("\2\2\2\u04c8\u0101\3\2\2\2\u04c9\u04d3\5\u0116\u008c\2")
        buf.write("\u04ca\u04d3\7d\2\2\u04cb\u04d3\5\u0118\u008d\2\u04cc")
        buf.write("\u04d3\7h\2\2\u04cd\u04d3\7c\2\2\u04ce\u04d3\5\u0108\u0085")
        buf.write("\2\u04cf\u04d3\5\62\32\2\u04d0\u04d3\5\u0104\u0083\2\u04d1")
        buf.write("\u04d3\5\u0106\u0084\2\u04d2\u04c9\3\2\2\2\u04d2\u04ca")
        buf.write("\3\2\2\2\u04d2\u04cb\3\2\2\2\u04d2\u04cc\3\2\2\2\u04d2")
        buf.write("\u04cd\3\2\2\2\u04d2\u04ce\3\2\2\2\u04d2\u04cf\3\2\2\2")
        buf.write("\u04d2\u04d0\3\2\2\2\u04d2\u04d1\3\2\2\2\u04d3\u0103\3")
        buf.write("\2\2\2\u04d4\u04d5\7\\\2\2\u04d5\u04da\5\u00e2r\2\u04d6")
        buf.write("\u04d7\7\n\2\2\u04d7\u04d9\5\u00e2r\2\u04d8\u04d6\3\2")
        buf.write("\2\2\u04d9\u04dc\3\2\2\2\u04da\u04d8\3\2\2\2\u04da\u04db")
        buf.write("\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04da\3\2\2\2\u04dd")
        buf.write("\u04de\7]\2\2\u04de\u0105\3\2\2\2\u04df\u04e0\7H\2\2\u04e0")
        buf.write("\u04e1\7^\2\2\u04e1\u04e2\5\u00e2r\2\u04e2\u04e3\7\n\2")
        buf.write("\2\u04e3\u04e4\5\u00e2r\2\u04e4\u04e5\7_\2\2\u04e5\u04ed")
        buf.write("\3\2\2\2\u04e6\u04e7\7\\\2\2\u04e7\u04e8\5\u00e2r\2\u04e8")
        buf.write("\u04e9\7Z\2\2\u04e9\u04ea\5\u00e2r\2\u04ea\u04eb\7]\2")
        buf.write("\2\u04eb\u04ed\3\2\2\2\u04ec\u04df\3\2\2\2\u04ec\u04e6")
        buf.write("\3\2\2\2\u04ed\u0107\3\2\2\2\u04ee\u04ef\5<\37\2\u04ef")
        buf.write("\u04f0\7\4\2\2\u04f0\u04f2\3\2\2\2\u04f1\u04ee\3\2\2\2")
        buf.write("\u04f2\u04f5\3\2\2\2\u04f3\u04f1\3\2\2\2\u04f3\u04f4\3")
        buf.write("\2\2\2\u04f4\u04f6\3\2\2\2\u04f5\u04f3\3\2\2\2\u04f6\u04f7")
        buf.write("\5<\37\2\u04f7\u0109\3\2\2\2\u04f8\u04fd\5\u010c\u0087")
        buf.write("\2\u04f9\u04fa\7\n\2\2\u04fa\u04fc\5\u010c\u0087\2\u04fb")
        buf.write("\u04f9\3\2\2\2\u04fc\u04ff\3\2\2\2\u04fd\u04fb\3\2\2\2")
        buf.write("\u04fd\u04fe\3\2\2\2\u04fe\u010b\3\2\2\2\u04ff\u04fd\3")
        buf.write("\2\2\2\u0500\u0501\5\u010e\u0088\2\u0501\u0502\7\13\2")
        buf.write("\2\u0502\u0505\5f\64\2\u0503\u0504\7\27\2\2\u0504\u0506")
        buf.write("\5\u0096L\2\u0505\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506")
        buf.write("\u010d\3\2\2\2\u0507\u0508\7i\2\2\u0508\u010f\3\2\2\2")
        buf.write("\u0509\u050e\5\u0112\u008a\2\u050a\u050b\7\n\2\2\u050b")
        buf.write("\u050d\5\u0112\u008a\2\u050c\u050a\3\2\2\2\u050d\u0510")
        buf.write("\3\2\2\2\u050e\u050c\3\2\2\2\u050e\u050f\3\2\2\2\u050f")
        buf.write("\u0515\3\2\2\2\u0510\u050e\3\2\2\2\u0511\u0512\7\n\2\2")
        buf.write("\u0512\u0514\5\u0114\u008b\2\u0513\u0511\3\2\2\2\u0514")
        buf.write("\u0517\3\2\2\2\u0515\u0513\3\2\2\2\u0515\u0516\3\2\2\2")
        buf.write("\u0516\u0521\3\2\2\2\u0517\u0515\3\2\2\2\u0518\u051d\5")
        buf.write("\u0114\u008b\2\u0519\u051a\7\n\2\2\u051a\u051c\5\u0114")
        buf.write("\u008b\2\u051b\u0519\3\2\2\2\u051c\u051f\3\2\2\2\u051d")
        buf.write("\u051b\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0521\3\2\2\2")
        buf.write("\u051f\u051d\3\2\2\2\u0520\u0509\3\2\2\2\u0520\u0518\3")
        buf.write("\2\2\2\u0521\u0111\3\2\2\2\u0522\u0523\5\u00e2r\2\u0523")
        buf.write("\u0113\3\2\2\2\u0524\u0525\5\u010e\u0088\2\u0525\u0526")
        buf.write("\7\13\2\2\u0526\u0527\5\u00e2r\2\u0527\u0115\3\2\2\2\u0528")
        buf.write("\u052b\7d\2\2\u0529\u052b\5\u0118\u008d\2\u052a\u0528")
        buf.write("\3\2\2\2\u052a\u0529\3\2\2\2\u052b\u052c\3\2\2\2\u052c")
        buf.write("\u052d\5\32\16\2\u052d\u0117\3\2\2\2\u052e\u052f\t\n\2")
        buf.write("\2\u052f\u0119\3\2\2\2\u0080\u011d\u0123\u012f\u0133\u013d")
        buf.write("\u014b\u0168\u016f\u017b\u017f\u0187\u018d\u019a\u01a3")
        buf.write("\u01b4\u01bb\u01c3\u01c8\u01cd\u01d4\u01dd\u01e5\u01ea")
        buf.write("\u01ef\u01f6\u01fd\u0204\u0206\u020b\u0210\u0218\u021d")
        buf.write("\u0226\u022d\u022f\u0234\u0239\u023f\u0244\u024c\u0251")
        buf.write("\u0257\u0262\u0270\u0276\u027c\u0284\u028b\u028f\u0293")
        buf.write("\u0298\u02aa\u02ae\u02b4\u02b8\u02bb\u02ca\u02d3\u02ec")
        buf.write("\u02f6\u02fd\u0304\u0308\u0310\u0318\u031a\u0325\u0332")
        buf.write("\u0338\u033c\u0341\u0353\u0357\u035b\u0360\u036c\u0376")
        buf.write("\u037c\u0384\u038b\u0390\u0393\u039b\u039f\u03a6\u03ab")
        buf.write("\u03b0\u03b9\u03c0\u03d0\u03df\u03e7\u03ec\u03f5\u03fe")
        buf.write("\u0402\u040a\u040f\u0414\u041d\u0422\u043e\u0444\u0451")
        buf.write("\u0459\u0461\u0467\u0472\u0480\u048e\u0496\u04b1\u04b7")
        buf.write("\u04b9\u04c7\u04d2\u04da\u04ec\u04f3\u04fd\u0505\u050e")
        buf.write("\u0515\u051d\u0520\u052a")
        return buf.getvalue()


class OpenSCENARIO2Parser (Parser):

    grammarFileName = "OpenSCENARIO2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = ["<INVALID>", "'import'", "'.'", "'type'", "'is'", "'SI'",
                    "'unit'", "'of'", "','", "':'", "'factor'", "'offset'",
                    "'kg'", "'m'", "'s'", "'A'", "'K'", "'mol'", "'cd'",
                    "'rad'", "'enum'", "'='", "'!'", "'=='", "'struct'",
                    "'inherits'", "'actor'", "'scenario'", "'action'",
                    "'modifier'", "'extend'", "'global'", "'list'", "'int'",
                    "'uint'", "'float'", "'bool'", "'string'", "'event'",
                    "'if'", "'@'", "'as'", "'rise'", "'fall'", "'elapsed'",
                    "'every'", "'var'", "'sample'", "'with'", "'keep'",
                    "'default'", "'hard'", "'remove_default'", "'on'",
                    "'do'", "'serial'", "'one_of'", "'parallel'", "'wait'",
                    "'emit'", "'call'", "'until'", "'def'", "'->'", "'expression'",
                    "'undefined'", "'external'", "'only'", "'cover'", "'record'",
                    "'range'", "'?'", "'=>'", "'or'", "'and'", "'not'",
                    "'!='", "'<'", "'<='", "'>'", "'>='", "'in'", "'+'",
                    "'-'", "'*'", "'/'", "'%'", "'it'", "'..'", "<INVALID>",
                    "'['", "']'", "'('", "')'"]

    symbolicNames = ["<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>",
                     "<INVALID>", "NEWLINE", "OPEN_BRACK", "CLOSE_BRACK",
                     "OPEN_PAREN", "CLOSE_PAREN", "SKIP_", "BLOCK_COMMENT",
                     "LINE_COMMENT", "StringLiteral", "FloatLiteral", "UintLiteral",
                     "HexUintLiteral", "IntLiteral", "BoolLiteral", "Identifier",
                     "INDENT", "DEDENT"]

    RULE_osc_file = 0
    RULE_preludeStatement = 1
    RULE_importStatement = 2
    RULE_importReference = 3
    RULE_structuredIdentifier = 4
    RULE_oscDeclaration = 5
    RULE_physicalTypeDeclaration = 6
    RULE_physicalTypeName = 7
    RULE_baseUnitSpecifier = 8
    RULE_sIBaseUnitSpecifier = 9
    RULE_unitDeclaration = 10
    RULE_unitSpecifier = 11
    RULE_unitName = 12
    RULE_siBaseExponentList = 13
    RULE_siBaseExponent = 14
    RULE_siUnitSpecifier = 15
    RULE_siFactor = 16
    RULE_siOffset = 17
    RULE_siBaseUnitName = 18
    RULE_enumDeclaration = 19
    RULE_enumMemberDecl = 20
    RULE_enumMemberValue = 21
    RULE_enumName = 22
    RULE_enumMemberName = 23
    RULE_enumValueReference = 24
    RULE_inheritsCondition = 25
    RULE_structDeclaration = 26
    RULE_structInherits = 27
    RULE_structMemberDecl = 28
    RULE_fieldName = 29
    RULE_structName = 30
    RULE_actorDeclaration = 31
    RULE_actorInherits = 32
    RULE_actorMemberDecl = 33
    RULE_actorName = 34
    RULE_scenarioDeclaration = 35
    RULE_scenarioInherits = 36
    RULE_scenarioMemberDecl = 37
    RULE_qualifiedBehaviorName = 38
    RULE_behaviorName = 39
    RULE_actionDeclaration = 40
    RULE_actionInherits = 41
    RULE_modifierDeclaration = 42
    RULE_modifierName = 43
    RULE_typeExtension = 44
    RULE_enumTypeExtension = 45
    RULE_structuredTypeExtension = 46
    RULE_extendableTypeName = 47
    RULE_extensionMemberDecl = 48
    RULE_globalParameterDeclaration = 49
    RULE_typeDeclarator = 50
    RULE_nonAggregateTypeDeclarator = 51
    RULE_aggregateTypeDeclarator = 52
    RULE_listTypeDeclarator = 53
    RULE_primitiveType = 54
    RULE_typeName = 55
    RULE_eventDeclaration = 56
    RULE_eventSpecification = 57
    RULE_eventReference = 58
    RULE_eventFieldDecl = 59
    RULE_eventFieldName = 60
    RULE_eventName = 61
    RULE_eventPath = 62
    RULE_eventCondition = 63
    RULE_riseExpression = 64
    RULE_fallExpression = 65
    RULE_elapsedExpression = 66
    RULE_everyExpression = 67
    RULE_boolExpression = 68
    RULE_durationExpression = 69
    RULE_fieldDeclaration = 70
    RULE_parameterDeclaration = 71
    RULE_variableDeclaration = 72
    RULE_sampleExpression = 73
    RULE_defaultValue = 74
    RULE_parameterWithDeclaration = 75
    RULE_parameterWithMember = 76
    RULE_constraintDeclaration = 77
    RULE_keepConstraintDeclaration = 78
    RULE_constraintQualifier = 79
    RULE_constraintExpression = 80
    RULE_removeDefaultDeclaration = 81
    RULE_parameterReference = 82
    RULE_modifierInvocation = 83
    RULE_behaviorExpression = 84
    RULE_behaviorSpecification = 85
    RULE_onDirective = 86
    RULE_onMember = 87
    RULE_doDirective = 88
    RULE_doMember = 89
    RULE_composition = 90
    RULE_compositionOperator = 91
    RULE_behaviorInvocation = 92
    RULE_behaviorWithDeclaration = 93
    RULE_behaviorWithMember = 94
    RULE_labelName = 95
    RULE_actorExpression = 96
    RULE_waitDirective = 97
    RULE_emitDirective = 98
    RULE_callDirective = 99
    RULE_untilDirective = 100
    RULE_methodInvocation = 101
    RULE_methodDeclaration = 102
    RULE_returnType = 103
    RULE_methodImplementation = 104
    RULE_methodQualifier = 105
    RULE_methodName = 106
    RULE_coverageDeclaration = 107
    RULE_coverDeclaration = 108
    RULE_recordDeclaration = 109
    RULE_coverageArgumentList = 110
    RULE_targetName = 111
    RULE_expression = 112
    RULE_ternaryOpExp = 113
    RULE_implication = 114
    RULE_disjunction = 115
    RULE_conjunction = 116
    RULE_inversion = 117
    RULE_relation = 118
    RULE_relationalOp = 119
    RULE_sumExpression = 120
    RULE_additiveOp = 121
    RULE_term = 122
    RULE_multiplicativeOp = 123
    RULE_factor = 124
    RULE_postfixExp = 125
    RULE_fieldAccess = 126
    RULE_primaryExp = 127
    RULE_valueExp = 128
    RULE_listConstructor = 129
    RULE_rangeConstructor = 130
    RULE_identifierReference = 131
    RULE_argumentListSpecification = 132
    RULE_argumentSpecification = 133
    RULE_argumentName = 134
    RULE_argumentList = 135
    RULE_positionalArgument = 136
    RULE_namedArgument = 137
    RULE_physicalLiteral = 138
    RULE_integerLiteral = 139

    ruleNames = ["osc_file", "preludeStatement", "importStatement", "importReference",
                 "structuredIdentifier", "oscDeclaration", "physicalTypeDeclaration",
                 "physicalTypeName", "baseUnitSpecifier", "sIBaseUnitSpecifier",
                 "unitDeclaration", "unitSpecifier", "unitName", "siBaseExponentList",
                 "siBaseExponent", "siUnitSpecifier", "siFactor", "siOffset",
                 "siBaseUnitName", "enumDeclaration", "enumMemberDecl",
                 "enumMemberValue", "enumName", "enumMemberName", "enumValueReference",
                 "inheritsCondition", "structDeclaration", "structInherits",
                 "structMemberDecl", "fieldName", "structName", "actorDeclaration",
                 "actorInherits", "actorMemberDecl", "actorName", "scenarioDeclaration",
                 "scenarioInherits", "scenarioMemberDecl", "qualifiedBehaviorName",
                 "behaviorName", "actionDeclaration", "actionInherits",
                 "modifierDeclaration", "modifierName", "typeExtension",
                 "enumTypeExtension", "structuredTypeExtension", "extendableTypeName",
                 "extensionMemberDecl", "globalParameterDeclaration",
                 "typeDeclarator", "nonAggregateTypeDeclarator", "aggregateTypeDeclarator",
                 "listTypeDeclarator", "primitiveType", "typeName", "eventDeclaration",
                 "eventSpecification", "eventReference", "eventFieldDecl",
                 "eventFieldName", "eventName", "eventPath", "eventCondition",
                 "riseExpression", "fallExpression", "elapsedExpression",
                 "everyExpression", "boolExpression", "durationExpression",
                 "fieldDeclaration", "parameterDeclaration", "variableDeclaration",
                 "sampleExpression", "defaultValue", "parameterWithDeclaration",
                 "parameterWithMember", "constraintDeclaration", "keepConstraintDeclaration",
                 "constraintQualifier", "constraintExpression", "removeDefaultDeclaration",
                 "parameterReference", "modifierInvocation", "behaviorExpression",
                 "behaviorSpecification", "onDirective", "onMember", "doDirective",
                 "doMember", "composition", "compositionOperator", "behaviorInvocation",
                 "behaviorWithDeclaration", "behaviorWithMember", "labelName",
                 "actorExpression", "waitDirective", "emitDirective",
                 "callDirective", "untilDirective", "methodInvocation",
                 "methodDeclaration", "returnType", "methodImplementation",
                 "methodQualifier", "methodName", "coverageDeclaration",
                 "coverDeclaration", "recordDeclaration", "coverageArgumentList",
                 "targetName", "expression", "ternaryOpExp", "implication",
                 "disjunction", "conjunction", "inversion", "relation",
                 "relationalOp", "sumExpression", "additiveOp", "term",
                 "multiplicativeOp", "factor", "postfixExp", "fieldAccess",
                 "primaryExp", "valueExp", "listConstructor", "rangeConstructor",
                 "identifierReference", "argumentListSpecification", "argumentSpecification",
                 "argumentName", "argumentList", "positionalArgument",
                 "namedArgument", "physicalLiteral", "integerLiteral"]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    T__62 = 63
    T__63 = 64
    T__64 = 65
    T__65 = 66
    T__66 = 67
    T__67 = 68
    T__68 = 69
    T__69 = 70
    T__70 = 71
    T__71 = 72
    T__72 = 73
    T__73 = 74
    T__74 = 75
    T__75 = 76
    T__76 = 77
    T__77 = 78
    T__78 = 79
    T__79 = 80
    T__80 = 81
    T__81 = 82
    T__82 = 83
    T__83 = 84
    T__84 = 85
    T__85 = 86
    T__86 = 87
    T__87 = 88
    NEWLINE = 89
    OPEN_BRACK = 90
    CLOSE_BRACK = 91
    OPEN_PAREN = 92
    CLOSE_PAREN = 93
    SKIP_ = 94
    BLOCK_COMMENT = 95
    LINE_COMMENT = 96
    StringLiteral = 97
    FloatLiteral = 98
    UintLiteral = 99
    HexUintLiteral = 100
    IntLiteral = 101
    BoolLiteral = 102
    Identifier = 103
    INDENT = 104
    DEDENT = 105

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class Osc_fileContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(OpenSCENARIO2Parser.EOF, 0)

        def preludeStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.PreludeStatementContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.PreludeStatementContext, i)

        def oscDeclaration(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.OscDeclarationContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.OscDeclarationContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_osc_file

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOsc_file"):
                listener.enterOsc_file(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOsc_file"):
                listener.exitOsc_file(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOsc_file"):
                return visitor.visitOsc_file(self)
            else:
                return visitor.visitChildren(self)

    def osc_file(self):

        localctx = OpenSCENARIO2Parser.Osc_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_osc_file)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 280
                    self.preludeStatement()
                self.state = 285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 0, self._ctx)

            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__2) | (1 << OpenSCENARIO2Parser.T__5) | (1 << OpenSCENARIO2Parser.T__19) | (1 << OpenSCENARIO2Parser.T__23) | (1 << OpenSCENARIO2Parser.T__25) | (1 << OpenSCENARIO2Parser.T__26) | (1 << OpenSCENARIO2Parser.T__27) | (1 << OpenSCENARIO2Parser.T__28) | (1 << OpenSCENARIO2Parser.T__29) | (1 << OpenSCENARIO2Parser.T__30))) != 0) or _la == OpenSCENARIO2Parser.NEWLINE:
                self.state = 286
                self.oscDeclaration()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self.match(OpenSCENARIO2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreludeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStatement(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ImportStatementContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_preludeStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPreludeStatement"):
                listener.enterPreludeStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPreludeStatement"):
                listener.exitPreludeStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPreludeStatement"):
                return visitor.visitPreludeStatement(self)
            else:
                return visitor.visitChildren(self)

    def preludeStatement(self):

        localctx = OpenSCENARIO2Parser.PreludeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preludeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.importStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importReference(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ImportReferenceContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_importStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportStatement"):
                listener.enterImportStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportStatement"):
                listener.exitImportStatement(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportStatement"):
                return visitor.visitImportStatement(self)
            else:
                return visitor.visitChildren(self)

    def importStatement(self):

        localctx = OpenSCENARIO2Parser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importStatement)
        try:
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.match(OpenSCENARIO2Parser.T__0)
                self.state = 297
                self.importReference()
                self.state = 298
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.StringLiteral, 0)

        def structuredIdentifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructuredIdentifierContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_importReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImportReference"):
                listener.enterImportReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImportReference"):
                listener.exitImportReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImportReference"):
                return visitor.visitImportReference(self)
            else:
                return visitor.visitChildren(self)

    def importReference(self):

        localctx = OpenSCENARIO2Parser.ImportReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importReference)
        try:
            self.state = 305
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.StringLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.match(OpenSCENARIO2Parser.StringLiteral)
                pass
            elif token in [OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self.structuredIdentifier(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructuredIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def structuredIdentifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructuredIdentifierContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_structuredIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStructuredIdentifier"):
                listener.enterStructuredIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStructuredIdentifier"):
                listener.exitStructuredIdentifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructuredIdentifier"):
                return visitor.visitStructuredIdentifier(self)
            else:
                return visitor.visitChildren(self)

    def structuredIdentifier(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OpenSCENARIO2Parser.StructuredIdentifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_structuredIdentifier, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(OpenSCENARIO2Parser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 315
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OpenSCENARIO2Parser.StructuredIdentifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structuredIdentifier)
                    self.state = 310
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 311
                    self.match(OpenSCENARIO2Parser.T__1)
                    self.state = 312
                    self.match(OpenSCENARIO2Parser.Identifier)
                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 4, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class OscDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physicalTypeDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PhysicalTypeDeclarationContext, 0)

        def unitDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.UnitDeclarationContext, 0)

        def enumDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumDeclarationContext, 0)

        def structDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructDeclarationContext, 0)

        def actorDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorDeclarationContext, 0)

        def actionDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActionDeclarationContext, 0)

        def scenarioDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ScenarioDeclarationContext, 0)

        def modifierDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ModifierDeclarationContext, 0)

        def typeExtension(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeExtensionContext, 0)

        def globalParameterDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.GlobalParameterDeclarationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_oscDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOscDeclaration"):
                listener.enterOscDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOscDeclaration"):
                listener.exitOscDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOscDeclaration"):
                return visitor.visitOscDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def oscDeclaration(self):

        localctx = OpenSCENARIO2Parser.OscDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oscDeclaration)
        try:
            self.state = 329
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self.physicalTypeDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.unitDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 320
                self.enumDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__23]:
                self.enterOuterAlt(localctx, 4)
                self.state = 321
                self.structDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__25]:
                self.enterOuterAlt(localctx, 5)
                self.state = 322
                self.actorDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__27]:
                self.enterOuterAlt(localctx, 6)
                self.state = 323
                self.actionDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__26]:
                self.enterOuterAlt(localctx, 7)
                self.state = 324
                self.scenarioDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__28]:
                self.enterOuterAlt(localctx, 8)
                self.state = 325
                self.modifierDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__29]:
                self.enterOuterAlt(localctx, 9)
                self.state = 326
                self.typeExtension()
                pass
            elif token in [OpenSCENARIO2Parser.T__30]:
                self.enterOuterAlt(localctx, 10)
                self.state = 327
                self.globalParameterDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 328
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PhysicalTypeDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physicalTypeName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PhysicalTypeNameContext, 0)

        def baseUnitSpecifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BaseUnitSpecifierContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_physicalTypeDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPhysicalTypeDeclaration"):
                listener.enterPhysicalTypeDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPhysicalTypeDeclaration"):
                listener.exitPhysicalTypeDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPhysicalTypeDeclaration"):
                return visitor.visitPhysicalTypeDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def physicalTypeDeclaration(self):

        localctx = OpenSCENARIO2Parser.PhysicalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_physicalTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(OpenSCENARIO2Parser.T__2)
            self.state = 332
            self.physicalTypeName()
            self.state = 333
            self.match(OpenSCENARIO2Parser.T__3)
            self.state = 334
            self.baseUnitSpecifier()
            self.state = 335
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PhysicalTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_physicalTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPhysicalTypeName"):
                listener.enterPhysicalTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPhysicalTypeName"):
                listener.exitPhysicalTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPhysicalTypeName"):
                return visitor.visitPhysicalTypeName(self)
            else:
                return visitor.visitChildren(self)

    def physicalTypeName(self):

        localctx = OpenSCENARIO2Parser.PhysicalTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_physicalTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseUnitSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sIBaseUnitSpecifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SIBaseUnitSpecifierContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_baseUnitSpecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBaseUnitSpecifier"):
                listener.enterBaseUnitSpecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBaseUnitSpecifier"):
                listener.exitBaseUnitSpecifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBaseUnitSpecifier"):
                return visitor.visitBaseUnitSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def baseUnitSpecifier(self):

        localctx = OpenSCENARIO2Parser.BaseUnitSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_baseUnitSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.sIBaseUnitSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SIBaseUnitSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def siBaseExponentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SiBaseExponentListContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_sIBaseUnitSpecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSIBaseUnitSpecifier"):
                listener.enterSIBaseUnitSpecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSIBaseUnitSpecifier"):
                listener.exitSIBaseUnitSpecifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSIBaseUnitSpecifier"):
                return visitor.visitSIBaseUnitSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def sIBaseUnitSpecifier(self):

        localctx = OpenSCENARIO2Parser.SIBaseUnitSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_sIBaseUnitSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(OpenSCENARIO2Parser.T__4)
            self.state = 342
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 343
            self.siBaseExponentList()
            self.state = 344
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnitDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unitName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.UnitNameContext, 0)

        def physicalTypeName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PhysicalTypeNameContext, 0)

        def unitSpecifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.UnitSpecifierContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_unitDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnitDeclaration"):
                listener.enterUnitDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnitDeclaration"):
                listener.exitUnitDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnitDeclaration"):
                return visitor.visitUnitDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def unitDeclaration(self):

        localctx = OpenSCENARIO2Parser.UnitDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_unitDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346
            self.match(OpenSCENARIO2Parser.T__5)
            self.state = 347
            self.unitName()
            self.state = 348
            self.match(OpenSCENARIO2Parser.T__6)
            self.state = 349
            self.physicalTypeName()
            self.state = 350
            self.match(OpenSCENARIO2Parser.T__3)
            self.state = 351
            self.unitSpecifier()
            self.state = 352
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnitSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def siUnitSpecifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SiUnitSpecifierContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_unitSpecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnitSpecifier"):
                listener.enterUnitSpecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnitSpecifier"):
                listener.exitUnitSpecifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnitSpecifier"):
                return visitor.visitUnitSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def unitSpecifier(self):

        localctx = OpenSCENARIO2Parser.UnitSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unitSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.siUnitSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnitNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def siBaseUnitName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SiBaseUnitNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_unitName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnitName"):
                listener.enterUnitName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnitName"):
                listener.exitUnitName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUnitName"):
                return visitor.visitUnitName(self)
            else:
                return visitor.visitChildren(self)

    def unitName(self):

        localctx = OpenSCENARIO2Parser.UnitNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_unitName)
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                self.match(OpenSCENARIO2Parser.Identifier)
                pass
            elif token in [OpenSCENARIO2Parser.T__11, OpenSCENARIO2Parser.T__12, OpenSCENARIO2Parser.T__13, OpenSCENARIO2Parser.T__14, OpenSCENARIO2Parser.T__15, OpenSCENARIO2Parser.T__16, OpenSCENARIO2Parser.T__17, OpenSCENARIO2Parser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 357
                self.siBaseUnitName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SiBaseExponentListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def siBaseExponent(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.SiBaseExponentContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.SiBaseExponentContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_siBaseExponentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSiBaseExponentList"):
                listener.enterSiBaseExponentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSiBaseExponentList"):
                listener.exitSiBaseExponentList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSiBaseExponentList"):
                return visitor.visitSiBaseExponentList(self)
            else:
                return visitor.visitChildren(self)

    def siBaseExponentList(self):

        localctx = OpenSCENARIO2Parser.SiBaseExponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_siBaseExponentList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.siBaseExponent()
            self.state = 365
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 361
                    self.match(OpenSCENARIO2Parser.T__7)
                    self.state = 362
                    self.siBaseExponent()
                self.state = 367
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 7, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SiBaseExponentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def siBaseUnitName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SiBaseUnitNameContext, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.IntegerLiteralContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_siBaseExponent

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSiBaseExponent"):
                listener.enterSiBaseExponent(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSiBaseExponent"):
                listener.exitSiBaseExponent(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSiBaseExponent"):
                return visitor.visitSiBaseExponent(self)
            else:
                return visitor.visitChildren(self)

    def siBaseExponent(self):

        localctx = OpenSCENARIO2Parser.SiBaseExponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_siBaseExponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.siBaseUnitName()
            self.state = 369
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 370
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SiUnitSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def siBaseExponentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SiBaseExponentListContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def siFactor(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SiFactorContext, 0)

        def siOffset(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SiOffsetContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_siUnitSpecifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSiUnitSpecifier"):
                listener.enterSiUnitSpecifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSiUnitSpecifier"):
                listener.exitSiUnitSpecifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSiUnitSpecifier"):
                return visitor.visitSiUnitSpecifier(self)
            else:
                return visitor.visitChildren(self)

    def siUnitSpecifier(self):

        localctx = OpenSCENARIO2Parser.SiUnitSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_siUnitSpecifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(OpenSCENARIO2Parser.T__4)
            self.state = 373
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 374
            self.siBaseExponentList()
            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
            if la_ == 1:
                self.state = 375
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 376
                self.siFactor()

            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__7:
                self.state = 379
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 380
                self.siOffset()

            self.state = 383
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SiFactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.FloatLiteral, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.IntegerLiteralContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_siFactor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSiFactor"):
                listener.enterSiFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSiFactor"):
                listener.exitSiFactor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSiFactor"):
                return visitor.visitSiFactor(self)
            else:
                return visitor.visitChildren(self)

    def siFactor(self):

        localctx = OpenSCENARIO2Parser.SiFactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_siFactor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(OpenSCENARIO2Parser.T__9)
            self.state = 386
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.FloatLiteral]:
                self.state = 387
                self.match(OpenSCENARIO2Parser.FloatLiteral)
                pass
            elif token in [OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral]:
                self.state = 388
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SiOffsetContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.FloatLiteral, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.IntegerLiteralContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_siOffset

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSiOffset"):
                listener.enterSiOffset(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSiOffset"):
                listener.exitSiOffset(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSiOffset"):
                return visitor.visitSiOffset(self)
            else:
                return visitor.visitChildren(self)

    def siOffset(self):

        localctx = OpenSCENARIO2Parser.SiOffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_siOffset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(OpenSCENARIO2Parser.T__10)
            self.state = 392
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.FloatLiteral]:
                self.state = 393
                self.match(OpenSCENARIO2Parser.FloatLiteral)
                pass
            elif token in [OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral]:
                self.state = 394
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SiBaseUnitNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_siBaseUnitName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSiBaseUnitName"):
                listener.enterSiBaseUnitName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSiBaseUnitName"):
                listener.exitSiBaseUnitName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSiBaseUnitName"):
                return visitor.visitSiBaseUnitName(self)
            else:
                return visitor.visitChildren(self)

    def siBaseUnitName(self):

        localctx = OpenSCENARIO2Parser.SiBaseUnitNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_siBaseUnitName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__11) | (1 << OpenSCENARIO2Parser.T__12) | (1 << OpenSCENARIO2Parser.T__13) | (1 << OpenSCENARIO2Parser.T__14) | (1 << OpenSCENARIO2Parser.T__15) | (1 << OpenSCENARIO2Parser.T__16) | (1 << OpenSCENARIO2Parser.T__17) | (1 << OpenSCENARIO2Parser.T__18))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumNameContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_BRACK, 0)

        def enumMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.EnumMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumMemberDeclContext, i)

        def CLOSE_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_BRACK, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_enumDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumDeclaration"):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumDeclaration"):
                listener.exitEnumDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumDeclaration"):
                return visitor.visitEnumDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def enumDeclaration(self):

        localctx = OpenSCENARIO2Parser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_enumDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(OpenSCENARIO2Parser.T__19)
            self.state = 400
            self.enumName()
            self.state = 401
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 402
            self.match(OpenSCENARIO2Parser.OPEN_BRACK)
            self.state = 403
            self.enumMemberDecl()
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 404
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 405
                self.enumMemberDecl()
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 411
            self.match(OpenSCENARIO2Parser.CLOSE_BRACK)
            self.state = 412
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumMemberDeclContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumMemberName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumMemberNameContext, 0)

        def enumMemberValue(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumMemberValueContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_enumMemberDecl

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumMemberDecl"):
                listener.enterEnumMemberDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumMemberDecl"):
                listener.exitEnumMemberDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumMemberDecl"):
                return visitor.visitEnumMemberDecl(self)
            else:
                return visitor.visitChildren(self)

    def enumMemberDecl(self):

        localctx = OpenSCENARIO2Parser.EnumMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_enumMemberDecl)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.enumMemberName()
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__20:
                self.state = 415
                self.match(OpenSCENARIO2Parser.T__20)
                self.state = 416
                self.enumMemberValue()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumMemberValueContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UintLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.UintLiteral, 0)

        def HexUintLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.HexUintLiteral, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_enumMemberValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumMemberValue"):
                listener.enterEnumMemberValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumMemberValue"):
                listener.exitEnumMemberValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumMemberValue"):
                return visitor.visitEnumMemberValue(self)
            else:
                return visitor.visitChildren(self)

    def enumMemberValue(self):

        localctx = OpenSCENARIO2Parser.EnumMemberValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_enumMemberValue)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            _la = self._input.LA(1)
            if not (_la == OpenSCENARIO2Parser.UintLiteral or _la == OpenSCENARIO2Parser.HexUintLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_enumName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumName"):
                listener.enterEnumName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumName"):
                listener.exitEnumName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumName"):
                return visitor.visitEnumName(self)
            else:
                return visitor.visitChildren(self)

    def enumName(self):

        localctx = OpenSCENARIO2Parser.EnumNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_enumName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumMemberNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_enumMemberName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumMemberName"):
                listener.enterEnumMemberName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumMemberName"):
                listener.exitEnumMemberName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumMemberName"):
                return visitor.visitEnumMemberName(self)
            else:
                return visitor.visitChildren(self)

    def enumMemberName(self):

        localctx = OpenSCENARIO2Parser.EnumMemberNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumMemberName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumValueReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumNameContext, 0)

        def enumMemberName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumMemberNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_enumValueReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumValueReference"):
                listener.enterEnumValueReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumValueReference"):
                listener.exitEnumValueReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumValueReference"):
                return visitor.visitEnumValueReference(self)
            else:
                return visitor.visitChildren(self)

    def enumValueReference(self):

        localctx = OpenSCENARIO2Parser.EnumValueReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumValueReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.enumName()
            self.state = 426
            self.match(OpenSCENARIO2Parser.T__21)
            self.state = 427
            self.enumMemberName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InheritsConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def fieldName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def enumValueReference(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumValueReferenceContext, 0)

        def BoolLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.BoolLiteral, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_inheritsCondition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInheritsCondition"):
                listener.enterInheritsCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInheritsCondition"):
                listener.exitInheritsCondition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInheritsCondition"):
                return visitor.visitInheritsCondition(self)
            else:
                return visitor.visitChildren(self)

    def inheritsCondition(self):

        localctx = OpenSCENARIO2Parser.InheritsConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_inheritsCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 430
            self.fieldName()
            self.state = 431
            self.match(OpenSCENARIO2Parser.T__22)
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.Identifier]:
                self.state = 432
                self.enumValueReference()
                pass
            elif token in [OpenSCENARIO2Parser.BoolLiteral]:
                self.state = 433
                self.match(OpenSCENARIO2Parser.BoolLiteral)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 436
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def structInherits(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructInheritsContext, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def structMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.StructMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.StructMemberDeclContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_structDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStructDeclaration"):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStructDeclaration"):
                listener.exitStructDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructDeclaration"):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def structDeclaration(self):

        localctx = OpenSCENARIO2Parser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_structDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(OpenSCENARIO2Parser.T__23)
            self.state = 439
            self.structName()
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__24:
                self.state = 440
                self.structInherits()

            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__8]:
                self.state = 443
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 444
                self.match(OpenSCENARIO2Parser.NEWLINE)
                self.state = 445
                self.match(OpenSCENARIO2Parser.INDENT)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 446
                    self.structMemberDecl()
                    self.state = 449
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__37) | (1 << OpenSCENARIO2Parser.T__45) | (1 << OpenSCENARIO2Parser.T__48) | (1 << OpenSCENARIO2Parser.T__51) | (1 << OpenSCENARIO2Parser.T__61))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (OpenSCENARIO2Parser.T__67 - 68)) | (1 << (OpenSCENARIO2Parser.T__68 - 68)) | (1 << (OpenSCENARIO2Parser.Identifier - 68)))) != 0)):
                        break

                self.state = 451
                self.match(OpenSCENARIO2Parser.DEDENT)
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 453
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructInheritsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructNameContext, 0)

        def inheritsCondition(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.InheritsConditionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_structInherits

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStructInherits"):
                listener.enterStructInherits(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStructInherits"):
                listener.exitStructInherits(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructInherits"):
                return visitor.visitStructInherits(self)
            else:
                return visitor.visitChildren(self)

    def structInherits(self):

        localctx = OpenSCENARIO2Parser.StructInheritsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_structInherits)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(OpenSCENARIO2Parser.T__24)
            self.state = 457
            self.structName()
            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.OPEN_PAREN:
                self.state = 458
                self.inheritsCondition()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructMemberDeclContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventDeclarationContext, 0)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldDeclarationContext, 0)

        def constraintDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ConstraintDeclarationContext, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MethodDeclarationContext, 0)

        def coverageDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CoverageDeclarationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_structMemberDecl

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStructMemberDecl"):
                listener.enterStructMemberDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStructMemberDecl"):
                listener.exitStructMemberDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructMemberDecl"):
                return visitor.visitStructMemberDecl(self)
            else:
                return visitor.visitChildren(self)

    def structMemberDecl(self):

        localctx = OpenSCENARIO2Parser.StructMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structMemberDecl)
        try:
            self.state = 466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.eventDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__45, OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.fieldDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__48, OpenSCENARIO2Parser.T__51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.constraintDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 464
                self.methodDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__67, OpenSCENARIO2Parser.T__68]:
                self.enterOuterAlt(localctx, 5)
                self.state = 465
                self.coverageDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_fieldName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldName"):
                listener.enterFieldName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldName"):
                listener.exitFieldName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldName"):
                return visitor.visitFieldName(self)
            else:
                return visitor.visitChildren(self)

    def fieldName(self):

        localctx = OpenSCENARIO2Parser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_structName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStructName"):
                listener.enterStructName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStructName"):
                listener.exitStructName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructName"):
                return visitor.visitStructName(self)
            else:
                return visitor.visitChildren(self)

    def structName(self):

        localctx = OpenSCENARIO2Parser.StructNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_structName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActorDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def actorInherits(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorInheritsContext, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def actorMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ActorMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorMemberDeclContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_actorDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterActorDeclaration"):
                listener.enterActorDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitActorDeclaration"):
                listener.exitActorDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitActorDeclaration"):
                return visitor.visitActorDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def actorDeclaration(self):

        localctx = OpenSCENARIO2Parser.ActorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_actorDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(OpenSCENARIO2Parser.T__25)
            self.state = 473
            self.actorName()
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__24:
                self.state = 474
                self.actorInherits()

            self.state = 488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__8]:
                self.state = 477
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 478
                self.match(OpenSCENARIO2Parser.NEWLINE)
                self.state = 479
                self.match(OpenSCENARIO2Parser.INDENT)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 480
                    self.actorMemberDecl()
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__37) | (1 << OpenSCENARIO2Parser.T__45) | (1 << OpenSCENARIO2Parser.T__48) | (1 << OpenSCENARIO2Parser.T__51) | (1 << OpenSCENARIO2Parser.T__61))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (OpenSCENARIO2Parser.T__67 - 68)) | (1 << (OpenSCENARIO2Parser.T__68 - 68)) | (1 << (OpenSCENARIO2Parser.Identifier - 68)))) != 0)):
                        break

                self.state = 485
                self.match(OpenSCENARIO2Parser.DEDENT)
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 487
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActorInheritsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorNameContext, 0)

        def inheritsCondition(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.InheritsConditionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_actorInherits

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterActorInherits"):
                listener.enterActorInherits(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitActorInherits"):
                listener.exitActorInherits(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitActorInherits"):
                return visitor.visitActorInherits(self)
            else:
                return visitor.visitChildren(self)

    def actorInherits(self):

        localctx = OpenSCENARIO2Parser.ActorInheritsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_actorInherits)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(OpenSCENARIO2Parser.T__24)
            self.state = 491
            self.actorName()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.OPEN_PAREN:
                self.state = 492
                self.inheritsCondition()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActorMemberDeclContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventDeclarationContext, 0)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldDeclarationContext, 0)

        def constraintDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ConstraintDeclarationContext, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MethodDeclarationContext, 0)

        def coverageDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CoverageDeclarationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_actorMemberDecl

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterActorMemberDecl"):
                listener.enterActorMemberDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitActorMemberDecl"):
                listener.exitActorMemberDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitActorMemberDecl"):
                return visitor.visitActorMemberDecl(self)
            else:
                return visitor.visitChildren(self)

    def actorMemberDecl(self):

        localctx = OpenSCENARIO2Parser.ActorMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_actorMemberDecl)
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 495
                self.eventDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__45, OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.fieldDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__48, OpenSCENARIO2Parser.T__51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 497
                self.constraintDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.methodDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__67, OpenSCENARIO2Parser.T__68]:
                self.enterOuterAlt(localctx, 5)
                self.state = 499
                self.coverageDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActorNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_actorName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterActorName"):
                listener.enterActorName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitActorName"):
                listener.exitActorName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitActorName"):
                return visitor.visitActorName(self)
            else:
                return visitor.visitChildren(self)

    def actorName(self):

        localctx = OpenSCENARIO2Parser.ActorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_actorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScenarioDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedBehaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.QualifiedBehaviorNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def scenarioInherits(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ScenarioInheritsContext, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def scenarioMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ScenarioMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ScenarioMemberDeclContext, i)

        def behaviorSpecification(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.BehaviorSpecificationContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorSpecificationContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_scenarioDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterScenarioDeclaration"):
                listener.enterScenarioDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitScenarioDeclaration"):
                listener.exitScenarioDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScenarioDeclaration"):
                return visitor.visitScenarioDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def scenarioDeclaration(self):

        localctx = OpenSCENARIO2Parser.ScenarioDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_scenarioDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.match(OpenSCENARIO2Parser.T__26)
            self.state = 505
            self.qualifiedBehaviorName()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__24:
                self.state = 506
                self.scenarioInherits()

            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__8]:
                self.state = 509
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 510
                self.match(OpenSCENARIO2Parser.NEWLINE)
                self.state = 511
                self.match(OpenSCENARIO2Parser.INDENT)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 514
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [OpenSCENARIO2Parser.T__37, OpenSCENARIO2Parser.T__45, OpenSCENARIO2Parser.T__48, OpenSCENARIO2Parser.T__51, OpenSCENARIO2Parser.T__61, OpenSCENARIO2Parser.T__67, OpenSCENARIO2Parser.T__68, OpenSCENARIO2Parser.Identifier]:
                        self.state = 512
                        self.scenarioMemberDecl()
                        pass
                    elif token in [OpenSCENARIO2Parser.T__52, OpenSCENARIO2Parser.T__53]:
                        self.state = 513
                        self.behaviorSpecification()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 516
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__37) | (1 << OpenSCENARIO2Parser.T__45) | (1 << OpenSCENARIO2Parser.T__48) | (1 << OpenSCENARIO2Parser.T__51) | (1 << OpenSCENARIO2Parser.T__52) | (1 << OpenSCENARIO2Parser.T__53) | (1 << OpenSCENARIO2Parser.T__61))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (OpenSCENARIO2Parser.T__67 - 68)) | (1 << (OpenSCENARIO2Parser.T__68 - 68)) | (1 << (OpenSCENARIO2Parser.Identifier - 68)))) != 0)):
                        break

                self.state = 518
                self.match(OpenSCENARIO2Parser.DEDENT)
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 520
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScenarioInheritsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedBehaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.QualifiedBehaviorNameContext, 0)

        def inheritsCondition(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.InheritsConditionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_scenarioInherits

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterScenarioInherits"):
                listener.enterScenarioInherits(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitScenarioInherits"):
                listener.exitScenarioInherits(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScenarioInherits"):
                return visitor.visitScenarioInherits(self)
            else:
                return visitor.visitChildren(self)

    def scenarioInherits(self):

        localctx = OpenSCENARIO2Parser.ScenarioInheritsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_scenarioInherits)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(OpenSCENARIO2Parser.T__24)
            self.state = 524
            self.qualifiedBehaviorName()
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.OPEN_PAREN:
                self.state = 525
                self.inheritsCondition()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScenarioMemberDeclContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventDeclarationContext, 0)

        def fieldDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldDeclarationContext, 0)

        def constraintDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ConstraintDeclarationContext, 0)

        def methodDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MethodDeclarationContext, 0)

        def coverageDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CoverageDeclarationContext, 0)

        def modifierInvocation(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ModifierInvocationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_scenarioMemberDecl

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterScenarioMemberDecl"):
                listener.enterScenarioMemberDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitScenarioMemberDecl"):
                listener.exitScenarioMemberDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitScenarioMemberDecl"):
                return visitor.visitScenarioMemberDecl(self)
            else:
                return visitor.visitChildren(self)

    def scenarioMemberDecl(self):

        localctx = OpenSCENARIO2Parser.ScenarioMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_scenarioMemberDecl)
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 30, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.eventDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.fieldDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 530
                self.constraintDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 531
                self.methodDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 532
                self.coverageDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 533
                self.modifierInvocation()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedBehaviorNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def behaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorNameContext, 0)

        def actorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_qualifiedBehaviorName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQualifiedBehaviorName"):
                listener.enterQualifiedBehaviorName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQualifiedBehaviorName"):
                listener.exitQualifiedBehaviorName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitQualifiedBehaviorName"):
                return visitor.visitQualifiedBehaviorName(self)
            else:
                return visitor.visitChildren(self)

    def qualifiedBehaviorName(self):

        localctx = OpenSCENARIO2Parser.QualifiedBehaviorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_qualifiedBehaviorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 31, self._ctx)
            if la_ == 1:
                self.state = 536
                self.actorName()
                self.state = 537
                self.match(OpenSCENARIO2Parser.T__1)

            self.state = 541
            self.behaviorName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BehaviorNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_behaviorName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBehaviorName"):
                listener.enterBehaviorName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBehaviorName"):
                listener.exitBehaviorName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBehaviorName"):
                return visitor.visitBehaviorName(self)
            else:
                return visitor.visitChildren(self)

    def behaviorName(self):

        localctx = OpenSCENARIO2Parser.BehaviorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_behaviorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedBehaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.QualifiedBehaviorNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def actionInherits(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActionInheritsContext, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def scenarioMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ScenarioMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ScenarioMemberDeclContext, i)

        def behaviorSpecification(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.BehaviorSpecificationContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorSpecificationContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_actionDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterActionDeclaration"):
                listener.enterActionDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitActionDeclaration"):
                listener.exitActionDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitActionDeclaration"):
                return visitor.visitActionDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def actionDeclaration(self):

        localctx = OpenSCENARIO2Parser.ActionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_actionDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(OpenSCENARIO2Parser.T__27)
            self.state = 546
            self.qualifiedBehaviorName()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__24:
                self.state = 547
                self.actionInherits()

            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__8]:
                self.state = 550
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 551
                self.match(OpenSCENARIO2Parser.NEWLINE)
                self.state = 552
                self.match(OpenSCENARIO2Parser.INDENT)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 555
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [OpenSCENARIO2Parser.T__37, OpenSCENARIO2Parser.T__45, OpenSCENARIO2Parser.T__48, OpenSCENARIO2Parser.T__51, OpenSCENARIO2Parser.T__61, OpenSCENARIO2Parser.T__67, OpenSCENARIO2Parser.T__68, OpenSCENARIO2Parser.Identifier]:
                        self.state = 553
                        self.scenarioMemberDecl()
                        pass
                    elif token in [OpenSCENARIO2Parser.T__52, OpenSCENARIO2Parser.T__53]:
                        self.state = 554
                        self.behaviorSpecification()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__37) | (1 << OpenSCENARIO2Parser.T__45) | (1 << OpenSCENARIO2Parser.T__48) | (1 << OpenSCENARIO2Parser.T__51) | (1 << OpenSCENARIO2Parser.T__52) | (1 << OpenSCENARIO2Parser.T__53) | (1 << OpenSCENARIO2Parser.T__61))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (OpenSCENARIO2Parser.T__67 - 68)) | (1 << (OpenSCENARIO2Parser.T__68 - 68)) | (1 << (OpenSCENARIO2Parser.Identifier - 68)))) != 0)):
                        break

                self.state = 559
                self.match(OpenSCENARIO2Parser.DEDENT)
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 561
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionInheritsContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedBehaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.QualifiedBehaviorNameContext, 0)

        def inheritsCondition(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.InheritsConditionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_actionInherits

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterActionInherits"):
                listener.enterActionInherits(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitActionInherits"):
                listener.exitActionInherits(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitActionInherits"):
                return visitor.visitActionInherits(self)
            else:
                return visitor.visitChildren(self)

    def actionInherits(self):

        localctx = OpenSCENARIO2Parser.ActionInheritsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_actionInherits)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(OpenSCENARIO2Parser.T__24)
            self.state = 565
            self.qualifiedBehaviorName()
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.OPEN_PAREN:
                self.state = 566
                self.inheritsCondition()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ModifierNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def actorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorNameContext, 0)

        def qualifiedBehaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.QualifiedBehaviorNameContext, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def scenarioMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ScenarioMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ScenarioMemberDeclContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_modifierDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModifierDeclaration"):
                listener.enterModifierDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModifierDeclaration"):
                listener.exitModifierDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModifierDeclaration"):
                return visitor.visitModifierDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def modifierDeclaration(self):

        localctx = OpenSCENARIO2Parser.ModifierDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_modifierDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(OpenSCENARIO2Parser.T__28)
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
            if la_ == 1:
                self.state = 570
                self.actorName()
                self.state = 571
                self.match(OpenSCENARIO2Parser.T__1)

            self.state = 575
            self.modifierName()
            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__6:
                self.state = 576
                self.match(OpenSCENARIO2Parser.T__6)
                self.state = 577
                self.qualifiedBehaviorName()

            self.state = 591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__8]:
                self.state = 580
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 581
                self.match(OpenSCENARIO2Parser.NEWLINE)
                self.state = 582
                self.match(OpenSCENARIO2Parser.INDENT)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 583
                    self.scenarioMemberDecl()
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__37) | (1 << OpenSCENARIO2Parser.T__45) | (1 << OpenSCENARIO2Parser.T__48) | (1 << OpenSCENARIO2Parser.T__51) | (1 << OpenSCENARIO2Parser.T__61))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (OpenSCENARIO2Parser.T__67 - 68)) | (1 << (OpenSCENARIO2Parser.T__68 - 68)) | (1 << (OpenSCENARIO2Parser.Identifier - 68)))) != 0)):
                        break

                self.state = 588
                self.match(OpenSCENARIO2Parser.DEDENT)
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 590
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_modifierName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModifierName"):
                listener.enterModifierName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModifierName"):
                listener.exitModifierName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModifierName"):
                return visitor.visitModifierName(self)
            else:
                return visitor.visitChildren(self)

    def modifierName(self):

        localctx = OpenSCENARIO2Parser.ModifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_modifierName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumTypeExtension(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumTypeExtensionContext, 0)

        def structuredTypeExtension(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructuredTypeExtensionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_typeExtension

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeExtension"):
                listener.enterTypeExtension(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeExtension"):
                listener.exitTypeExtension(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeExtension"):
                return visitor.visitTypeExtension(self)
            else:
                return visitor.visitChildren(self)

    def typeExtension(self):

        localctx = OpenSCENARIO2Parser.TypeExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeExtension)
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 41, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.enumTypeExtension()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.structuredTypeExtension()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumTypeExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumNameContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_BRACK, 0)

        def enumMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.EnumMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumMemberDeclContext, i)

        def CLOSE_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_BRACK, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_enumTypeExtension

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEnumTypeExtension"):
                listener.enterEnumTypeExtension(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEnumTypeExtension"):
                listener.exitEnumTypeExtension(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEnumTypeExtension"):
                return visitor.visitEnumTypeExtension(self)
            else:
                return visitor.visitChildren(self)

    def enumTypeExtension(self):

        localctx = OpenSCENARIO2Parser.EnumTypeExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumTypeExtension)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(OpenSCENARIO2Parser.T__29)
            self.state = 600
            self.enumName()
            self.state = 601
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 602
            self.match(OpenSCENARIO2Parser.OPEN_BRACK)
            self.state = 603
            self.enumMemberDecl()
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 604
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 605
                self.enumMemberDecl()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.match(OpenSCENARIO2Parser.CLOSE_BRACK)
            self.state = 612
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructuredTypeExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extendableTypeName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExtendableTypeNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def extensionMemberDecl(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ExtensionMemberDeclContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ExtensionMemberDeclContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_structuredTypeExtension

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStructuredTypeExtension"):
                listener.enterStructuredTypeExtension(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStructuredTypeExtension"):
                listener.exitStructuredTypeExtension(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStructuredTypeExtension"):
                return visitor.visitStructuredTypeExtension(self)
            else:
                return visitor.visitChildren(self)

    def structuredTypeExtension(self):

        localctx = OpenSCENARIO2Parser.StructuredTypeExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_structuredTypeExtension)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(OpenSCENARIO2Parser.T__29)
            self.state = 615
            self.extendableTypeName()
            self.state = 616
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 617
            self.match(OpenSCENARIO2Parser.NEWLINE)
            self.state = 618
            self.match(OpenSCENARIO2Parser.INDENT)
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 619
                self.extensionMemberDecl()
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__37) | (1 << OpenSCENARIO2Parser.T__45) | (1 << OpenSCENARIO2Parser.T__48) | (1 << OpenSCENARIO2Parser.T__51) | (1 << OpenSCENARIO2Parser.T__52) | (1 << OpenSCENARIO2Parser.T__53) | (1 << OpenSCENARIO2Parser.T__61))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (OpenSCENARIO2Parser.T__67 - 68)) | (1 << (OpenSCENARIO2Parser.T__68 - 68)) | (1 << (OpenSCENARIO2Parser.Identifier - 68)))) != 0)):
                    break

            self.state = 624
            self.match(OpenSCENARIO2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtendableTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeNameContext, 0)

        def qualifiedBehaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.QualifiedBehaviorNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_extendableTypeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExtendableTypeName"):
                listener.enterExtendableTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExtendableTypeName"):
                listener.exitExtendableTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExtendableTypeName"):
                return visitor.visitExtendableTypeName(self)
            else:
                return visitor.visitChildren(self)

    def extendableTypeName(self):

        localctx = OpenSCENARIO2Parser.ExtendableTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_extendableTypeName)
        try:
            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 44, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.typeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 627
                self.qualifiedBehaviorName()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtensionMemberDeclContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structMemberDecl(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructMemberDeclContext, 0)

        def actorMemberDecl(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorMemberDeclContext, 0)

        def scenarioMemberDecl(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ScenarioMemberDeclContext, 0)

        def behaviorSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorSpecificationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_extensionMemberDecl

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExtensionMemberDecl"):
                listener.enterExtensionMemberDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExtensionMemberDecl"):
                listener.exitExtensionMemberDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExtensionMemberDecl"):
                return visitor.visitExtensionMemberDecl(self)
            else:
                return visitor.visitChildren(self)

    def extensionMemberDecl(self):

        localctx = OpenSCENARIO2Parser.ExtensionMemberDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_extensionMemberDecl)
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 45, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.structMemberDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.actorMemberDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 632
                self.scenarioMemberDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 633
                self.behaviorSpecification()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.FieldNameContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, i)

        def typeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeDeclaratorContext, 0)

        def parameterWithDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ParameterWithDeclarationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.DefaultValueContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_globalParameterDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobalParameterDeclaration"):
                listener.enterGlobalParameterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobalParameterDeclaration"):
                listener.exitGlobalParameterDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitGlobalParameterDeclaration"):
                return visitor.visitGlobalParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def globalParameterDeclaration(self):

        localctx = OpenSCENARIO2Parser.GlobalParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_globalParameterDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(OpenSCENARIO2Parser.T__30)
            self.state = 637
            self.fieldName()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 638
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 639
                self.fieldName()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 645
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 646
            self.typeDeclarator()
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__20:
                self.state = 647
                self.match(OpenSCENARIO2Parser.T__20)
                self.state = 648
                self.defaultValue()

            self.state = 653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__47]:
                self.state = 651
                self.parameterWithDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 652
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonAggregateTypeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.NonAggregateTypeDeclaratorContext, 0)

        def aggregateTypeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.AggregateTypeDeclaratorContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_typeDeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeDeclarator"):
                listener.enterTypeDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeDeclarator"):
                listener.exitTypeDeclarator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeDeclarator"):
                return visitor.visitTypeDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def typeDeclarator(self):

        localctx = OpenSCENARIO2Parser.TypeDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_typeDeclarator)
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__32, OpenSCENARIO2Parser.T__33, OpenSCENARIO2Parser.T__34, OpenSCENARIO2Parser.T__35, OpenSCENARIO2Parser.T__36, OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 655
                self.nonAggregateTypeDeclarator()
                pass
            elif token in [OpenSCENARIO2Parser.T__31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.aggregateTypeDeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NonAggregateTypeDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PrimitiveTypeContext, 0)

        def typeName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeNameContext, 0)

        def qualifiedBehaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.QualifiedBehaviorNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_nonAggregateTypeDeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNonAggregateTypeDeclarator"):
                listener.enterNonAggregateTypeDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNonAggregateTypeDeclarator"):
                listener.exitNonAggregateTypeDeclarator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNonAggregateTypeDeclarator"):
                return visitor.visitNonAggregateTypeDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def nonAggregateTypeDeclarator(self):

        localctx = OpenSCENARIO2Parser.NonAggregateTypeDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_nonAggregateTypeDeclarator)
        try:
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 50, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.primitiveType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.typeName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.qualifiedBehaviorName()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregateTypeDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def listTypeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ListTypeDeclaratorContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_aggregateTypeDeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAggregateTypeDeclarator"):
                listener.enterAggregateTypeDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAggregateTypeDeclarator"):
                listener.exitAggregateTypeDeclarator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAggregateTypeDeclarator"):
                return visitor.visitAggregateTypeDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def aggregateTypeDeclarator(self):

        localctx = OpenSCENARIO2Parser.AggregateTypeDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_aggregateTypeDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.listTypeDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListTypeDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonAggregateTypeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.NonAggregateTypeDeclaratorContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_listTypeDeclarator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListTypeDeclarator"):
                listener.enterListTypeDeclarator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListTypeDeclarator"):
                listener.exitListTypeDeclarator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListTypeDeclarator"):
                return visitor.visitListTypeDeclarator(self)
            else:
                return visitor.visitChildren(self)

    def listTypeDeclarator(self):

        localctx = OpenSCENARIO2Parser.ListTypeDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_listTypeDeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(OpenSCENARIO2Parser.T__31)
            self.state = 667
            self.match(OpenSCENARIO2Parser.T__6)
            self.state = 668
            self.nonAggregateTypeDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_primitiveType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimitiveType"):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimitiveType"):
                listener.exitPrimitiveType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimitiveType"):
                return visitor.visitPrimitiveType(self)
            else:
                return visitor.visitChildren(self)

    def primitiveType(self):

        localctx = OpenSCENARIO2Parser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_primitiveType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__32) | (1 << OpenSCENARIO2Parser.T__33) | (1 << OpenSCENARIO2Parser.T__34) | (1 << OpenSCENARIO2Parser.T__35) | (1 << OpenSCENARIO2Parser.T__36))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_typeName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeName"):
                listener.enterTypeName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeName"):
                listener.exitTypeName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeName"):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)

    def typeName(self):

        localctx = OpenSCENARIO2Parser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def argumentListSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListSpecificationContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def eventSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventSpecificationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventDeclaration"):
                listener.enterEventDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventDeclaration"):
                listener.exitEventDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventDeclaration"):
                return visitor.visitEventDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def eventDeclaration(self):

        localctx = OpenSCENARIO2Parser.EventDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_eventDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(OpenSCENARIO2Parser.T__37)
            self.state = 675
            self.eventName()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.OPEN_PAREN:
                self.state = 676
                self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                self.state = 677
                self.argumentListSpecification()
                self.state = 678
                self.match(OpenSCENARIO2Parser.CLOSE_PAREN)

            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__3:
                self.state = 682
                self.match(OpenSCENARIO2Parser.T__3)
                self.state = 683
                self.eventSpecification()

            self.state = 686
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventReference(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventReferenceContext, 0)

        def eventCondition(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventConditionContext, 0)

        def eventFieldDecl(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventFieldDeclContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventSpecification"):
                listener.enterEventSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventSpecification"):
                listener.exitEventSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventSpecification"):
                return visitor.visitEventSpecification(self)
            else:
                return visitor.visitChildren(self)

    def eventSpecification(self):

        localctx = OpenSCENARIO2Parser.EventSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_eventSpecification)
        self._la = 0  # Token type
        try:
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.eventReference()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == OpenSCENARIO2Parser.T__38 or _la == OpenSCENARIO2Parser.T__40:
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la == OpenSCENARIO2Parser.T__40:
                        self.state = 689
                        self.eventFieldDecl()

                    self.state = 692
                    self.match(OpenSCENARIO2Parser.T__38)
                    self.state = 693
                    self.eventCondition()

                pass
            elif token in [OpenSCENARIO2Parser.T__41, OpenSCENARIO2Parser.T__42, OpenSCENARIO2Parser.T__43, OpenSCENARIO2Parser.T__44, OpenSCENARIO2Parser.T__69, OpenSCENARIO2Parser.T__74, OpenSCENARIO2Parser.T__82, OpenSCENARIO2Parser.T__86, OpenSCENARIO2Parser.OPEN_BRACK, OpenSCENARIO2Parser.OPEN_PAREN, OpenSCENARIO2Parser.StringLiteral, OpenSCENARIO2Parser.FloatLiteral, OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral, OpenSCENARIO2Parser.BoolLiteral, OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.eventCondition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventPath(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventPathContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventReference"):
                listener.enterEventReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventReference"):
                listener.exitEventReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventReference"):
                return visitor.visitEventReference(self)
            else:
                return visitor.visitChildren(self)

    def eventReference(self):

        localctx = OpenSCENARIO2Parser.EventReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_eventReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(OpenSCENARIO2Parser.T__39)
            self.state = 700
            self.eventPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventFieldDeclContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventFieldName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventFieldNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventFieldDecl

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventFieldDecl"):
                listener.enterEventFieldDecl(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventFieldDecl"):
                listener.exitEventFieldDecl(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventFieldDecl"):
                return visitor.visitEventFieldDecl(self)
            else:
                return visitor.visitChildren(self)

    def eventFieldDecl(self):

        localctx = OpenSCENARIO2Parser.EventFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_eventFieldDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(OpenSCENARIO2Parser.T__40)
            self.state = 703
            self.eventFieldName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventFieldName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventFieldName"):
                listener.enterEventFieldName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventFieldName"):
                listener.exitEventFieldName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventFieldName"):
                return visitor.visitEventFieldName(self)
            else:
                return visitor.visitChildren(self)

    def eventFieldName(self):

        localctx = OpenSCENARIO2Parser.EventFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_eventFieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventName"):
                listener.enterEventName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventName"):
                listener.exitEventName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventName"):
                return visitor.visitEventName(self)
            else:
                return visitor.visitChildren(self)

    def eventName(self):

        localctx = OpenSCENARIO2Parser.EventNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_eventName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventPathContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventNameContext, 0)

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventPath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventPath"):
                listener.enterEventPath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventPath"):
                listener.exitEventPath(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventPath"):
                return visitor.visitEventPath(self)
            else:
                return visitor.visitChildren(self)

    def eventPath(self):

        localctx = OpenSCENARIO2Parser.EventPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_eventPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 56, self._ctx)
            if la_ == 1:
                self.state = 709
                self.expression()
                self.state = 710
                self.match(OpenSCENARIO2Parser.T__1)

            self.state = 714
            self.eventName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventConditionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BoolExpressionContext, 0)

        def riseExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RiseExpressionContext, 0)

        def fallExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FallExpressionContext, 0)

        def elapsedExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ElapsedExpressionContext, 0)

        def everyExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EveryExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_eventCondition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEventCondition"):
                listener.enterEventCondition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEventCondition"):
                listener.exitEventCondition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEventCondition"):
                return visitor.visitEventCondition(self)
            else:
                return visitor.visitChildren(self)

    def eventCondition(self):

        localctx = OpenSCENARIO2Parser.EventConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_eventCondition)
        try:
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__69, OpenSCENARIO2Parser.T__74, OpenSCENARIO2Parser.T__82, OpenSCENARIO2Parser.T__86, OpenSCENARIO2Parser.OPEN_BRACK, OpenSCENARIO2Parser.OPEN_PAREN, OpenSCENARIO2Parser.StringLiteral, OpenSCENARIO2Parser.FloatLiteral, OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral, OpenSCENARIO2Parser.BoolLiteral, OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 716
                self.boolExpression()
                pass
            elif token in [OpenSCENARIO2Parser.T__41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.riseExpression()
                pass
            elif token in [OpenSCENARIO2Parser.T__42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 718
                self.fallExpression()
                pass
            elif token in [OpenSCENARIO2Parser.T__43]:
                self.enterOuterAlt(localctx, 4)
                self.state = 719
                self.elapsedExpression()
                pass
            elif token in [OpenSCENARIO2Parser.T__44]:
                self.enterOuterAlt(localctx, 5)
                self.state = 720
                self.everyExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RiseExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def boolExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BoolExpressionContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_riseExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRiseExpression"):
                listener.enterRiseExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRiseExpression"):
                listener.exitRiseExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRiseExpression"):
                return visitor.visitRiseExpression(self)
            else:
                return visitor.visitChildren(self)

    def riseExpression(self):

        localctx = OpenSCENARIO2Parser.RiseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_riseExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(OpenSCENARIO2Parser.T__41)
            self.state = 724
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 725
            self.boolExpression()
            self.state = 726
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FallExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def boolExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BoolExpressionContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_fallExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFallExpression"):
                listener.enterFallExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFallExpression"):
                listener.exitFallExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFallExpression"):
                return visitor.visitFallExpression(self)
            else:
                return visitor.visitChildren(self)

    def fallExpression(self):

        localctx = OpenSCENARIO2Parser.FallExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fallExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(OpenSCENARIO2Parser.T__42)
            self.state = 729
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 730
            self.boolExpression()
            self.state = 731
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElapsedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def durationExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.DurationExpressionContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_elapsedExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElapsedExpression"):
                listener.enterElapsedExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElapsedExpression"):
                listener.exitElapsedExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElapsedExpression"):
                return visitor.visitElapsedExpression(self)
            else:
                return visitor.visitChildren(self)

    def elapsedExpression(self):

        localctx = OpenSCENARIO2Parser.ElapsedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_elapsedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(OpenSCENARIO2Parser.T__43)
            self.state = 734
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 735
            self.durationExpression()
            self.state = 736
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EveryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._Identifier = None  # Token

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def durationExpression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.DurationExpressionContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.DurationExpressionContext, i)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_everyExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEveryExpression"):
                listener.enterEveryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEveryExpression"):
                listener.exitEveryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEveryExpression"):
                return visitor.visitEveryExpression(self)
            else:
                return visitor.visitChildren(self)

    def everyExpression(self):

        localctx = OpenSCENARIO2Parser.EveryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_everyExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(OpenSCENARIO2Parser.T__44)
            self.state = 739
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 740
            self.durationExpression()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__7:
                self.state = 741
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 742
                localctx._Identifier = self.match(OpenSCENARIO2Parser.Identifier)

                offsetName = (None if localctx._Identifier is None else localctx._Identifier.text)
                if (not (offsetName == "offset")):
                    print("%s must be offset" % offsetName)
                    raise NoViableAltException(self)

                self.state = 744
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 745
                self.durationExpression()

            self.state = 748
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BoolExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_boolExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBoolExpression"):
                listener.enterBoolExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBoolExpression"):
                listener.exitBoolExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBoolExpression"):
                return visitor.visitBoolExpression(self)
            else:
                return visitor.visitChildren(self)

    def boolExpression(self):

        localctx = OpenSCENARIO2Parser.BoolExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_boolExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_durationExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDurationExpression"):
                listener.enterDurationExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDurationExpression"):
                listener.exitDurationExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDurationExpression"):
                return visitor.visitDurationExpression(self)
            else:
                return visitor.visitChildren(self)

    def durationExpression(self):

        localctx = OpenSCENARIO2Parser.DurationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_durationExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FieldDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ParameterDeclarationContext, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.VariableDeclarationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_fieldDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldDeclaration"):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldDeclaration"):
                listener.exitFieldDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldDeclaration"):
                return visitor.visitFieldDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def fieldDeclaration(self):

        localctx = OpenSCENARIO2Parser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_fieldDeclaration)
        try:
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.parameterDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.variableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.FieldNameContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, i)

        def typeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeDeclaratorContext, 0)

        def parameterWithDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ParameterWithDeclarationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.DefaultValueContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_parameterDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterDeclaration"):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterDeclaration"):
                listener.exitParameterDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterDeclaration"):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def parameterDeclaration(self):

        localctx = OpenSCENARIO2Parser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_parameterDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.fieldName()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 759
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 760
                self.fieldName()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 766
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 767
            self.typeDeclarator()
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__20:
                self.state = 768
                self.match(OpenSCENARIO2Parser.T__20)
                self.state = 769
                self.defaultValue()

            self.state = 774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__47]:
                self.state = 772
                self.parameterWithDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 773
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.FieldNameContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, i)

        def typeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeDeclaratorContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def sampleExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SampleExpressionContext, 0)

        def valueExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ValueExpContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_variableDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVariableDeclaration"):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVariableDeclaration"):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVariableDeclaration"):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def variableDeclaration(self):

        localctx = OpenSCENARIO2Parser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_variableDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(OpenSCENARIO2Parser.T__45)
            self.state = 777
            self.fieldName()
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 778
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 779
                self.fieldName()
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 785
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 786
            self.typeDeclarator()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__20:
                self.state = 787
                self.match(OpenSCENARIO2Parser.T__20)
                self.state = 790
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [OpenSCENARIO2Parser.T__46]:
                    self.state = 788
                    self.sampleExpression()
                    pass
                elif token in [OpenSCENARIO2Parser.T__69, OpenSCENARIO2Parser.OPEN_BRACK, OpenSCENARIO2Parser.StringLiteral, OpenSCENARIO2Parser.FloatLiteral, OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral, OpenSCENARIO2Parser.BoolLiteral, OpenSCENARIO2Parser.Identifier]:
                    self.state = 789
                    self.valueExp()
                    pass
                else:
                    raise NoViableAltException(self)

            self.state = 794
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SampleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def eventSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventSpecificationContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.DefaultValueContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_sampleExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSampleExpression"):
                listener.enterSampleExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSampleExpression"):
                listener.exitSampleExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSampleExpression"):
                return visitor.visitSampleExpression(self)
            else:
                return visitor.visitChildren(self)

    def sampleExpression(self):

        localctx = OpenSCENARIO2Parser.SampleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sampleExpression)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(OpenSCENARIO2Parser.T__46)
            self.state = 797
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 798
            self.expression()
            self.state = 799
            self.match(OpenSCENARIO2Parser.T__7)
            self.state = 800
            self.eventSpecification()
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__7:
                self.state = 801
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 802
                self.defaultValue()

            self.state = 805
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_defaultValue

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDefaultValue"):
                listener.enterDefaultValue(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDefaultValue"):
                listener.exitDefaultValue(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDefaultValue"):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)

    def defaultValue(self):

        localctx = OpenSCENARIO2Parser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterWithDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def parameterWithMember(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ParameterWithMemberContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ParameterWithMemberContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_parameterWithDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterWithDeclaration"):
                listener.enterParameterWithDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterWithDeclaration"):
                listener.exitParameterWithDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterWithDeclaration"):
                return visitor.visitParameterWithDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def parameterWithDeclaration(self):

        localctx = OpenSCENARIO2Parser.ParameterWithDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_parameterWithDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.match(OpenSCENARIO2Parser.T__47)
            self.state = 810
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 811
            self.match(OpenSCENARIO2Parser.NEWLINE)
            self.state = 812
            self.match(OpenSCENARIO2Parser.INDENT)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 813
                self.parameterWithMember()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (OpenSCENARIO2Parser.T__48 - 49)) | (1 << (OpenSCENARIO2Parser.T__51 - 49)) | (1 << (OpenSCENARIO2Parser.T__67 - 49)) | (1 << (OpenSCENARIO2Parser.T__68 - 49)))) != 0)):
                    break

            self.state = 818
            self.match(OpenSCENARIO2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterWithMemberContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ConstraintDeclarationContext, 0)

        def coverageDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CoverageDeclarationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_parameterWithMember

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterWithMember"):
                listener.enterParameterWithMember(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterWithMember"):
                listener.exitParameterWithMember(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterWithMember"):
                return visitor.visitParameterWithMember(self)
            else:
                return visitor.visitChildren(self)

    def parameterWithMember(self):

        localctx = OpenSCENARIO2Parser.ParameterWithMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_parameterWithMember)
        try:
            self.state = 822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__48, OpenSCENARIO2Parser.T__51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.constraintDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__67, OpenSCENARIO2Parser.T__68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.coverageDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keepConstraintDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.KeepConstraintDeclarationContext, 0)

        def removeDefaultDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RemoveDefaultDeclarationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_constraintDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraintDeclaration"):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraintDeclaration"):
                listener.exitConstraintDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraintDeclaration"):
                return visitor.visitConstraintDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def constraintDeclaration(self):

        localctx = OpenSCENARIO2Parser.ConstraintDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_constraintDeclaration)
        try:
            self.state = 826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.keepConstraintDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.removeDefaultDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeepConstraintDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def constraintExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ConstraintExpressionContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def constraintQualifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ConstraintQualifierContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_keepConstraintDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterKeepConstraintDeclaration"):
                listener.enterKeepConstraintDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitKeepConstraintDeclaration"):
                listener.exitKeepConstraintDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitKeepConstraintDeclaration"):
                return visitor.visitKeepConstraintDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def keepConstraintDeclaration(self):

        localctx = OpenSCENARIO2Parser.KeepConstraintDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_keepConstraintDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(OpenSCENARIO2Parser.T__48)
            self.state = 829
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__49 or _la == OpenSCENARIO2Parser.T__50:
                self.state = 830
                self.constraintQualifier()

            self.state = 833
            self.constraintExpression()
            self.state = 834
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
            self.state = 835
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_constraintQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraintQualifier"):
                listener.enterConstraintQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraintQualifier"):
                listener.exitConstraintQualifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraintQualifier"):
                return visitor.visitConstraintQualifier(self)
            else:
                return visitor.visitChildren(self)

    def constraintQualifier(self):

        localctx = OpenSCENARIO2Parser.ConstraintQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_constraintQualifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            _la = self._input.LA(1)
            if not (_la == OpenSCENARIO2Parser.T__49 or _la == OpenSCENARIO2Parser.T__50):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_constraintExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstraintExpression"):
                listener.enterConstraintExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstraintExpression"):
                listener.exitConstraintExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConstraintExpression"):
                return visitor.visitConstraintExpression(self)
            else:
                return visitor.visitChildren(self)

    def constraintExpression(self):

        localctx = OpenSCENARIO2Parser.ConstraintExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_constraintExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemoveDefaultDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def parameterReference(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ParameterReferenceContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_removeDefaultDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRemoveDefaultDeclaration"):
                listener.enterRemoveDefaultDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRemoveDefaultDeclaration"):
                listener.exitRemoveDefaultDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRemoveDefaultDeclaration"):
                return visitor.visitRemoveDefaultDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def removeDefaultDeclaration(self):

        localctx = OpenSCENARIO2Parser.RemoveDefaultDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_removeDefaultDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(OpenSCENARIO2Parser.T__51)
            self.state = 842
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 843
            self.parameterReference()
            self.state = 844
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
            self.state = 845
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, 0)

        def fieldAccess(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldAccessContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_parameterReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterReference"):
                listener.enterParameterReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterReference"):
                listener.exitParameterReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterReference"):
                return visitor.visitParameterReference(self)
            else:
                return visitor.visitChildren(self)

    def parameterReference(self):

        localctx = OpenSCENARIO2Parser.ParameterReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_parameterReference)
        try:
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 71, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.fieldName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.fieldAccess()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ModifierNameContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def argumentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListContext, 0)

        def behaviorExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorExpressionContext, 0)

        def actorExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_modifierInvocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterModifierInvocation"):
                listener.enterModifierInvocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitModifierInvocation"):
                listener.exitModifierInvocation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitModifierInvocation"):
                return visitor.visitModifierInvocation(self)
            else:
                return visitor.visitChildren(self)

    def modifierInvocation(self):

        localctx = OpenSCENARIO2Parser.ModifierInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_modifierInvocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 73, self._ctx)
            if la_ == 1:
                self.state = 853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 72, self._ctx)
                if la_ == 1:
                    self.state = 851
                    self.behaviorExpression()
                    pass

                elif la_ == 2:
                    self.state = 852
                    self.actorExpression()
                    pass

                self.state = 855
                self.match(OpenSCENARIO2Parser.T__1)

            self.state = 859
            self.modifierName()
            self.state = 860
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (OpenSCENARIO2Parser.T__69 - 70)) | (1 << (OpenSCENARIO2Parser.T__74 - 70)) | (1 << (OpenSCENARIO2Parser.T__82 - 70)) | (1 << (OpenSCENARIO2Parser.T__86 - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_BRACK - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_PAREN - 70)) | (1 << (OpenSCENARIO2Parser.StringLiteral - 70)) | (1 << (OpenSCENARIO2Parser.FloatLiteral - 70)) | (1 << (OpenSCENARIO2Parser.UintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.HexUintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.IntLiteral - 70)) | (1 << (OpenSCENARIO2Parser.BoolLiteral - 70)) | (1 << (OpenSCENARIO2Parser.Identifier - 70)))) != 0):
                self.state = 861
                self.argumentList()

            self.state = 864
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
            self.state = 865
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BehaviorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def behaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorNameContext, 0)

        def actorExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_behaviorExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBehaviorExpression"):
                listener.enterBehaviorExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBehaviorExpression"):
                listener.exitBehaviorExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBehaviorExpression"):
                return visitor.visitBehaviorExpression(self)
            else:
                return visitor.visitChildren(self)

    def behaviorExpression(self):

        localctx = OpenSCENARIO2Parser.BehaviorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_behaviorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.actorExpression()
            self.state = 868
            self.match(OpenSCENARIO2Parser.T__1)
            self.state = 870
            self.behaviorName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BehaviorSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def onDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.OnDirectiveContext, 0)

        def doDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.DoDirectiveContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_behaviorSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBehaviorSpecification"):
                listener.enterBehaviorSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBehaviorSpecification"):
                listener.exitBehaviorSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBehaviorSpecification"):
                return visitor.visitBehaviorSpecification(self)
            else:
                return visitor.visitChildren(self)

    def behaviorSpecification(self):

        localctx = OpenSCENARIO2Parser.BehaviorSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_behaviorSpecification)
        try:
            self.state = 874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 872
                self.onDirective()
                pass
            elif token in [OpenSCENARIO2Parser.T__53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 873
                self.doDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventSpecificationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def onMember(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.OnMemberContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.OnMemberContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_onDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOnDirective"):
                listener.enterOnDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOnDirective"):
                listener.exitOnDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOnDirective"):
                return visitor.visitOnDirective(self)
            else:
                return visitor.visitChildren(self)

    def onDirective(self):

        localctx = OpenSCENARIO2Parser.OnDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_onDirective)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(OpenSCENARIO2Parser.T__52)
            self.state = 877
            self.eventSpecification()
            self.state = 878
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 879
            self.match(OpenSCENARIO2Parser.NEWLINE)
            self.state = 880
            self.match(OpenSCENARIO2Parser.INDENT)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 881
                self.onMember()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == OpenSCENARIO2Parser.T__58 or _la == OpenSCENARIO2Parser.T__59):
                    break

            self.state = 886
            self.match(OpenSCENARIO2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnMemberContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CallDirectiveContext, 0)

        def emitDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EmitDirectiveContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_onMember

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOnMember"):
                listener.enterOnMember(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOnMember"):
                listener.exitOnMember(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOnMember"):
                return visitor.visitOnMember(self)
            else:
                return visitor.visitChildren(self)

    def onMember(self):

        localctx = OpenSCENARIO2Parser.OnMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_onMember)
        try:
            self.state = 890
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.callDirective()
                pass
            elif token in [OpenSCENARIO2Parser.T__58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.emitDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doMember(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.DoMemberContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_doDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoDirective"):
                listener.enterDoDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoDirective"):
                listener.exitDoDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDoDirective"):
                return visitor.visitDoDirective(self)
            else:
                return visitor.visitChildren(self)

    def doDirective(self):

        localctx = OpenSCENARIO2Parser.DoDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_doDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(OpenSCENARIO2Parser.T__53)
            self.state = 893
            self.doMember()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoMemberContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def composition(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CompositionContext, 0)

        def behaviorInvocation(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorInvocationContext, 0)

        def waitDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.WaitDirectiveContext, 0)

        def emitDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EmitDirectiveContext, 0)

        def callDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CallDirectiveContext, 0)

        def labelName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.LabelNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_doMember

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoMember"):
                listener.enterDoMember(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoMember"):
                listener.exitDoMember(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDoMember"):
                return visitor.visitDoMember(self)
            else:
                return visitor.visitChildren(self)

    def doMember(self):

        localctx = OpenSCENARIO2Parser.DoMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_doMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 78, self._ctx)
            if la_ == 1:
                self.state = 895
                self.labelName()
                self.state = 896
                self.match(OpenSCENARIO2Parser.T__8)

            self.state = 905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__54, OpenSCENARIO2Parser.T__55, OpenSCENARIO2Parser.T__56]:
                self.state = 900
                self.composition()
                pass
            elif token in [OpenSCENARIO2Parser.Identifier]:
                self.state = 901
                self.behaviorInvocation()
                pass
            elif token in [OpenSCENARIO2Parser.T__57]:
                self.state = 902
                self.waitDirective()
                pass
            elif token in [OpenSCENARIO2Parser.T__58]:
                self.state = 903
                self.emitDirective()
                pass
            elif token in [OpenSCENARIO2Parser.T__59]:
                self.state = 904
                self.callDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compositionOperator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CompositionOperatorContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def doMember(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.DoMemberContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.DoMemberContext, i)

        def behaviorWithDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorWithDeclarationContext, 0)

        def argumentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_composition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComposition"):
                listener.enterComposition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComposition"):
                listener.exitComposition(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitComposition"):
                return visitor.visitComposition(self)
            else:
                return visitor.visitChildren(self)

    def composition(self):

        localctx = OpenSCENARIO2Parser.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_composition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.compositionOperator()
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.OPEN_PAREN:
                self.state = 908
                self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (OpenSCENARIO2Parser.T__69 - 70)) | (1 << (OpenSCENARIO2Parser.T__74 - 70)) | (1 << (OpenSCENARIO2Parser.T__82 - 70)) | (1 << (OpenSCENARIO2Parser.T__86 - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_BRACK - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_PAREN - 70)) | (1 << (OpenSCENARIO2Parser.StringLiteral - 70)) | (1 << (OpenSCENARIO2Parser.FloatLiteral - 70)) | (1 << (OpenSCENARIO2Parser.UintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.HexUintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.IntLiteral - 70)) | (1 << (OpenSCENARIO2Parser.BoolLiteral - 70)) | (1 << (OpenSCENARIO2Parser.Identifier - 70)))) != 0):
                    self.state = 909
                    self.argumentList()

                self.state = 912
                self.match(OpenSCENARIO2Parser.CLOSE_PAREN)

            self.state = 915
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 916
            self.match(OpenSCENARIO2Parser.NEWLINE)
            self.state = 917
            self.match(OpenSCENARIO2Parser.INDENT)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 918
                self.doMember()
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (OpenSCENARIO2Parser.T__54 - 55)) | (1 << (OpenSCENARIO2Parser.T__55 - 55)) | (1 << (OpenSCENARIO2Parser.T__56 - 55)) | (1 << (OpenSCENARIO2Parser.T__57 - 55)) | (1 << (OpenSCENARIO2Parser.T__58 - 55)) | (1 << (OpenSCENARIO2Parser.T__59 - 55)) | (1 << (OpenSCENARIO2Parser.Identifier - 55)))) != 0)):
                    break

            self.state = 923
            self.match(OpenSCENARIO2Parser.DEDENT)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__47:
                self.state = 924
                self.behaviorWithDeclaration()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositionOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_compositionOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCompositionOperator"):
                listener.enterCompositionOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCompositionOperator"):
                listener.exitCompositionOperator(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCompositionOperator"):
                return visitor.visitCompositionOperator(self)
            else:
                return visitor.visitChildren(self)

    def compositionOperator(self):

        localctx = OpenSCENARIO2Parser.CompositionOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_compositionOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << OpenSCENARIO2Parser.T__54) | (1 << OpenSCENARIO2Parser.T__55) | (1 << OpenSCENARIO2Parser.T__56))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BehaviorInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def behaviorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorNameContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def behaviorWithDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorWithDeclarationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def actorExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorExpressionContext, 0)

        def argumentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_behaviorInvocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBehaviorInvocation"):
                listener.enterBehaviorInvocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBehaviorInvocation"):
                listener.exitBehaviorInvocation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBehaviorInvocation"):
                return visitor.visitBehaviorInvocation(self)
            else:
                return visitor.visitChildren(self)

    def behaviorInvocation(self):

        localctx = OpenSCENARIO2Parser.BehaviorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_behaviorInvocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 84, self._ctx)
            if la_ == 1:
                self.state = 929
                self.actorExpression()
                self.state = 930
                self.match(OpenSCENARIO2Parser.T__1)

            self.state = 934
            self.behaviorName()
            self.state = 935
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (OpenSCENARIO2Parser.T__69 - 70)) | (1 << (OpenSCENARIO2Parser.T__74 - 70)) | (1 << (OpenSCENARIO2Parser.T__82 - 70)) | (1 << (OpenSCENARIO2Parser.T__86 - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_BRACK - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_PAREN - 70)) | (1 << (OpenSCENARIO2Parser.StringLiteral - 70)) | (1 << (OpenSCENARIO2Parser.FloatLiteral - 70)) | (1 << (OpenSCENARIO2Parser.UintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.HexUintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.IntLiteral - 70)) | (1 << (OpenSCENARIO2Parser.BoolLiteral - 70)) | (1 << (OpenSCENARIO2Parser.Identifier - 70)))) != 0):
                self.state = 936
                self.argumentList()

            self.state = 939
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__47]:
                self.state = 940
                self.behaviorWithDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.NEWLINE]:
                self.state = 941
                self.match(OpenSCENARIO2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BehaviorWithDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(OpenSCENARIO2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(OpenSCENARIO2Parser.DEDENT, 0)

        def behaviorWithMember(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.BehaviorWithMemberContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.BehaviorWithMemberContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_behaviorWithDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBehaviorWithDeclaration"):
                listener.enterBehaviorWithDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBehaviorWithDeclaration"):
                listener.exitBehaviorWithDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBehaviorWithDeclaration"):
                return visitor.visitBehaviorWithDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def behaviorWithDeclaration(self):

        localctx = OpenSCENARIO2Parser.BehaviorWithDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_behaviorWithDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(OpenSCENARIO2Parser.T__47)
            self.state = 945
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 946
            self.match(OpenSCENARIO2Parser.NEWLINE)
            self.state = 947
            self.match(OpenSCENARIO2Parser.INDENT)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 948
                self.behaviorWithMember()
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & ((1 << (OpenSCENARIO2Parser.T__48 - 49)) | (1 << (OpenSCENARIO2Parser.T__51 - 49)) | (1 << (OpenSCENARIO2Parser.T__60 - 49)) | (1 << (OpenSCENARIO2Parser.Identifier - 49)))) != 0)):
                    break

            self.state = 953
            self.match(OpenSCENARIO2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BehaviorWithMemberContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ConstraintDeclarationContext, 0)

        def modifierInvocation(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ModifierInvocationContext, 0)

        def untilDirective(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.UntilDirectiveContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_behaviorWithMember

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBehaviorWithMember"):
                listener.enterBehaviorWithMember(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBehaviorWithMember"):
                listener.exitBehaviorWithMember(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBehaviorWithMember"):
                return visitor.visitBehaviorWithMember(self)
            else:
                return visitor.visitChildren(self)

    def behaviorWithMember(self):

        localctx = OpenSCENARIO2Parser.BehaviorWithMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_behaviorWithMember)
        try:
            self.state = 958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__48, OpenSCENARIO2Parser.T__51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.constraintDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 956
                self.modifierInvocation()
                pass
            elif token in [OpenSCENARIO2Parser.T__60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 957
                self.untilDirective()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_labelName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLabelName"):
                listener.enterLabelName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLabelName"):
                listener.exitLabelName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitLabelName"):
                return visitor.visitLabelName(self)
            else:
                return visitor.visitChildren(self)

    def labelName(self):

        localctx = OpenSCENARIO2Parser.LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_labelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actorName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ActorNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_actorExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterActorExpression"):
                listener.enterActorExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitActorExpression"):
                listener.exitActorExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitActorExpression"):
                return visitor.visitActorExpression(self)
            else:
                return visitor.visitChildren(self)

    def actorExpression(self):

        localctx = OpenSCENARIO2Parser.ActorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_actorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.actorName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WaitDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventSpecificationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_waitDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterWaitDirective"):
                listener.enterWaitDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitWaitDirective"):
                listener.exitWaitDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitWaitDirective"):
                return visitor.visitWaitDirective(self)
            else:
                return visitor.visitChildren(self)

    def waitDirective(self):

        localctx = OpenSCENARIO2Parser.WaitDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_waitDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(OpenSCENARIO2Parser.T__57)
            self.state = 965
            self.eventSpecification()
            self.state = 966
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmitDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventNameContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_emitDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEmitDirective"):
                listener.enterEmitDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEmitDirective"):
                listener.exitEmitDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitEmitDirective"):
                return visitor.visitEmitDirective(self)
            else:
                return visitor.visitChildren(self)

    def emitDirective(self):

        localctx = OpenSCENARIO2Parser.EmitDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_emitDirective)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(OpenSCENARIO2Parser.T__58)
            self.state = 969
            self.eventName()
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.OPEN_PAREN:
                self.state = 970
                self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                self.state = 971
                self.argumentList()
                self.state = 972
                self.match(OpenSCENARIO2Parser.CLOSE_PAREN)

            self.state = 976
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodInvocation(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MethodInvocationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_callDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCallDirective"):
                listener.enterCallDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCallDirective"):
                listener.exitCallDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCallDirective"):
                return visitor.visitCallDirective(self)
            else:
                return visitor.visitChildren(self)

    def callDirective(self):

        localctx = OpenSCENARIO2Parser.CallDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_callDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(OpenSCENARIO2Parser.T__59)
            self.state = 979
            self.methodInvocation()
            self.state = 980
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UntilDirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventSpecificationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_untilDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUntilDirective"):
                listener.enterUntilDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUntilDirective"):
                listener.exitUntilDirective(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUntilDirective"):
                return visitor.visitUntilDirective(self)
            else:
                return visitor.visitChildren(self)

    def untilDirective(self):

        localctx = OpenSCENARIO2Parser.UntilDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_untilDirective)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(OpenSCENARIO2Parser.T__60)
            self.state = 983
            self.eventSpecification()
            self.state = 984
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_methodInvocation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodInvocation"):
                listener.enterMethodInvocation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodInvocation"):
                listener.exitMethodInvocation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodInvocation"):
                return visitor.visitMethodInvocation(self)
            else:
                return visitor.visitChildren(self)

    def methodInvocation(self):

        localctx = OpenSCENARIO2Parser.MethodInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_methodInvocation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.postfixExp(0)
            self.state = 987
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (OpenSCENARIO2Parser.T__69 - 70)) | (1 << (OpenSCENARIO2Parser.T__74 - 70)) | (1 << (OpenSCENARIO2Parser.T__82 - 70)) | (1 << (OpenSCENARIO2Parser.T__86 - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_BRACK - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_PAREN - 70)) | (1 << (OpenSCENARIO2Parser.StringLiteral - 70)) | (1 << (OpenSCENARIO2Parser.FloatLiteral - 70)) | (1 << (OpenSCENARIO2Parser.UintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.HexUintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.IntLiteral - 70)) | (1 << (OpenSCENARIO2Parser.BoolLiteral - 70)) | (1 << (OpenSCENARIO2Parser.Identifier - 70)))) != 0):
                self.state = 988
                self.argumentList()

            self.state = 991
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MethodNameContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def methodImplementation(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MethodImplementationContext, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def argumentListSpecification(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListSpecificationContext, 0)

        def returnType(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ReturnTypeContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_methodDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodDeclaration"):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodDeclaration"):
                listener.exitMethodDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodDeclaration"):
                return visitor.visitMethodDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def methodDeclaration(self):

        localctx = OpenSCENARIO2Parser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_methodDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(OpenSCENARIO2Parser.T__61)
            self.state = 994
            self.methodName()
            self.state = 995
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.Identifier:
                self.state = 996
                self.argumentListSpecification()

            self.state = 999
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__62:
                self.state = 1000
                self.match(OpenSCENARIO2Parser.T__62)
                self.state = 1001
                self.returnType()

            self.state = 1004
            self.methodImplementation()
            self.state = 1005
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnTypeContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeDeclaratorContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_returnType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnType"):
                listener.enterReturnType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnType"):
                listener.exitReturnType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitReturnType"):
                return visitor.visitReturnType(self)
            else:
                return visitor.visitChildren(self)

    def returnType(self):

        localctx = OpenSCENARIO2Parser.ReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_returnType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.typeDeclarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodImplementationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def structuredIdentifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.StructuredIdentifierContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def methodQualifier(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MethodQualifierContext, 0)

        def argumentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_methodImplementation

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodImplementation"):
                listener.enterMethodImplementation(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodImplementation"):
                listener.exitMethodImplementation(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodImplementation"):
                return visitor.visitMethodImplementation(self)
            else:
                return visitor.visitChildren(self)

    def methodImplementation(self):

        localctx = OpenSCENARIO2Parser.MethodImplementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_methodImplementation)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(OpenSCENARIO2Parser.T__3)
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__66:
                self.state = 1010
                self.methodQualifier()

            self.state = 1024
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__63]:
                self.state = 1013
                self.match(OpenSCENARIO2Parser.T__63)
                self.state = 1014
                self.expression()
                pass
            elif token in [OpenSCENARIO2Parser.T__64]:
                self.state = 1015
                self.match(OpenSCENARIO2Parser.T__64)
                pass
            elif token in [OpenSCENARIO2Parser.T__65]:
                self.state = 1016
                self.match(OpenSCENARIO2Parser.T__65)
                self.state = 1017
                self.structuredIdentifier(0)
                self.state = 1018
                self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (OpenSCENARIO2Parser.T__69 - 70)) | (1 << (OpenSCENARIO2Parser.T__74 - 70)) | (1 << (OpenSCENARIO2Parser.T__82 - 70)) | (1 << (OpenSCENARIO2Parser.T__86 - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_BRACK - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_PAREN - 70)) | (1 << (OpenSCENARIO2Parser.StringLiteral - 70)) | (1 << (OpenSCENARIO2Parser.FloatLiteral - 70)) | (1 << (OpenSCENARIO2Parser.UintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.HexUintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.IntLiteral - 70)) | (1 << (OpenSCENARIO2Parser.BoolLiteral - 70)) | (1 << (OpenSCENARIO2Parser.Identifier - 70)))) != 0):
                    self.state = 1019
                    self.argumentList()

                self.state = 1022
                self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_methodQualifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodQualifier"):
                listener.enterMethodQualifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodQualifier"):
                listener.exitMethodQualifier(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodQualifier"):
                return visitor.visitMethodQualifier(self)
            else:
                return visitor.visitChildren(self)

    def methodQualifier(self):

        localctx = OpenSCENARIO2Parser.MethodQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_methodQualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(OpenSCENARIO2Parser.T__66)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_methodName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMethodName"):
                listener.enterMethodName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMethodName"):
                listener.exitMethodName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMethodName"):
                return visitor.visitMethodName(self)
            else:
                return visitor.visitChildren(self)

    def methodName(self):

        localctx = OpenSCENARIO2Parser.MethodNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_methodName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CoverageDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coverDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.CoverDeclarationContext, 0)

        def recordDeclaration(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RecordDeclarationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_coverageDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverageDeclaration"):
                listener.enterCoverageDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverageDeclaration"):
                listener.exitCoverageDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverageDeclaration"):
                return visitor.visitCoverageDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def coverageDeclaration(self):

        localctx = OpenSCENARIO2Parser.CoverageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_coverageDeclaration)
        try:
            self.state = 1032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1030
                self.coverDeclaration()
                pass
            elif token in [OpenSCENARIO2Parser.T__68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1031
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CoverDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def targetName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TargetNameContext, 0)

        def coverageArgumentList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.CoverageArgumentListContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.CoverageArgumentListContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_coverDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverDeclaration"):
                listener.enterCoverDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverDeclaration"):
                listener.exitCoverDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverDeclaration"):
                return visitor.visitCoverDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def coverDeclaration(self):

        localctx = OpenSCENARIO2Parser.CoverDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_coverDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(OpenSCENARIO2Parser.T__67)
            self.state = 1035
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.Identifier:
                self.state = 1036
                self.targetName()

            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 1039
                self.coverageArgumentList()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1045
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
            self.state = 1046
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def NEWLINE(self):
            return self.getToken(OpenSCENARIO2Parser.NEWLINE, 0)

        def targetName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TargetNameContext, 0)

        def coverageArgumentList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.CoverageArgumentListContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.CoverageArgumentListContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_recordDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRecordDeclaration"):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRecordDeclaration"):
                listener.exitRecordDeclaration(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRecordDeclaration"):
                return visitor.visitRecordDeclaration(self)
            else:
                return visitor.visitChildren(self)

    def recordDeclaration(self):

        localctx = OpenSCENARIO2Parser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_recordDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(OpenSCENARIO2Parser.T__68)
            self.state = 1049
            self.match(OpenSCENARIO2Parser.OPEN_PAREN)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.Identifier:
                self.state = 1050
                self.targetName()

            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 1053
                self.coverageArgumentList()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1059
            self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
            self.state = 1060
            self.match(OpenSCENARIO2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CoverageArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_coverageArgumentList

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class CoverageEventContext(CoverageArgumentListContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.CoverageArgumentListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def eventName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EventNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverageEvent"):
                listener.enterCoverageEvent(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverageEvent"):
                listener.exitCoverageEvent(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverageEvent"):
                return visitor.visitCoverageEvent(self)
            else:
                return visitor.visitChildren(self)

    class CoverageEveryContext(CoverageArgumentListContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.CoverageArgumentListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ValueExpContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverageEvery"):
                listener.enterCoverageEvery(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverageEvery"):
                listener.exitCoverageEvery(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverageEvery"):
                return visitor.visitCoverageEvery(self)
            else:
                return visitor.visitChildren(self)

    class CoverageNameArgumentContext(CoverageArgumentListContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.CoverageArgumentListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedArgument(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.NamedArgumentContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverageNameArgument"):
                listener.enterCoverageNameArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverageNameArgument"):
                listener.exitCoverageNameArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverageNameArgument"):
                return visitor.visitCoverageNameArgument(self)
            else:
                return visitor.visitChildren(self)

    class CoverageExpressionContext(CoverageArgumentListContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.CoverageArgumentListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverageExpression"):
                listener.enterCoverageExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverageExpression"):
                listener.exitCoverageExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverageExpression"):
                return visitor.visitCoverageExpression(self)
            else:
                return visitor.visitChildren(self)

    class CoverageRangeContext(CoverageArgumentListContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.CoverageArgumentListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def rangeConstructor(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RangeConstructorContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverageRange"):
                listener.enterCoverageRange(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverageRange"):
                listener.exitCoverageRange(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverageRange"):
                return visitor.visitCoverageRange(self)
            else:
                return visitor.visitChildren(self)

    class CoverageUnitContext(CoverageArgumentListContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.CoverageArgumentListContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unitName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.UnitNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCoverageUnit"):
                listener.enterCoverageUnit(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCoverageUnit"):
                listener.exitCoverageUnit(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCoverageUnit"):
                return visitor.visitCoverageUnit(self)
            else:
                return visitor.visitChildren(self)

    def coverageArgumentList(self):

        localctx = OpenSCENARIO2Parser.CoverageArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_coverageArgumentList)
        try:
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 101, self._ctx)
            if la_ == 1:
                localctx = OpenSCENARIO2Parser.CoverageExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1063
                self.match(OpenSCENARIO2Parser.T__63)
                self.state = 1064
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 1065
                self.expression()
                pass

            elif la_ == 2:
                localctx = OpenSCENARIO2Parser.CoverageUnitContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1067
                self.match(OpenSCENARIO2Parser.T__5)
                self.state = 1068
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 1069
                self.unitName()
                pass

            elif la_ == 3:
                localctx = OpenSCENARIO2Parser.CoverageRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1070
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1071
                self.match(OpenSCENARIO2Parser.T__69)
                self.state = 1072
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 1073
                self.rangeConstructor()
                pass

            elif la_ == 4:
                localctx = OpenSCENARIO2Parser.CoverageEveryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1074
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1075
                self.match(OpenSCENARIO2Parser.T__44)
                self.state = 1076
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 1077
                self.valueExp()
                pass

            elif la_ == 5:
                localctx = OpenSCENARIO2Parser.CoverageEventContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1078
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1079
                self.match(OpenSCENARIO2Parser.T__37)
                self.state = 1080
                self.match(OpenSCENARIO2Parser.T__8)
                self.state = 1081
                self.eventName()
                pass

            elif la_ == 6:
                localctx = OpenSCENARIO2Parser.CoverageNameArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1082
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1083
                self.namedArgument()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TargetNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_targetName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTargetName"):
                listener.enterTargetName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTargetName"):
                listener.exitTargetName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTargetName"):
                return visitor.visitTargetName(self)
            else:
                return visitor.visitChildren(self)

    def targetName(self):

        localctx = OpenSCENARIO2Parser.TargetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_targetName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implication(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ImplicationContext, 0)

        def ternaryOpExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TernaryOpExpContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitExpression"):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)

    def expression(self):

        localctx = OpenSCENARIO2Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_expression)
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 102, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1088
                self.implication()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1089
                self.ternaryOpExp()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TernaryOpExpContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implication(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ImplicationContext, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_ternaryOpExp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTernaryOpExp"):
                listener.enterTernaryOpExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTernaryOpExp"):
                listener.exitTernaryOpExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTernaryOpExp"):
                return visitor.visitTernaryOpExp(self)
            else:
                return visitor.visitChildren(self)

    def ternaryOpExp(self):

        localctx = OpenSCENARIO2Parser.TernaryOpExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_ternaryOpExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.implication()
            self.state = 1093
            self.match(OpenSCENARIO2Parser.T__70)
            self.state = 1094
            self.expression()
            self.state = 1095
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 1096
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.DisjunctionContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_implication

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterImplication"):
                listener.enterImplication(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitImplication"):
                listener.exitImplication(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitImplication"):
                return visitor.visitImplication(self)
            else:
                return visitor.visitChildren(self)

    def implication(self):

        localctx = OpenSCENARIO2Parser.ImplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_implication)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.disjunction()
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__71:
                self.state = 1099
                self.match(OpenSCENARIO2Parser.T__71)
                self.state = 1100
                self.disjunction()
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ConjunctionContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_disjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDisjunction"):
                listener.enterDisjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDisjunction"):
                listener.exitDisjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDisjunction"):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)

    def disjunction(self):

        localctx = OpenSCENARIO2Parser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_disjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.conjunction()
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__72:
                self.state = 1107
                self.match(OpenSCENARIO2Parser.T__72)
                self.state = 1108
                self.conjunction()
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.InversionContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.InversionContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_conjunction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConjunction"):
                listener.enterConjunction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConjunction"):
                listener.exitConjunction(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitConjunction"):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)

    def conjunction(self):

        localctx = OpenSCENARIO2Parser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_conjunction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.inversion()
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__73:
                self.state = 1115
                self.match(OpenSCENARIO2Parser.T__73)
                self.state = 1116
                self.inversion()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InversionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.InversionContext, 0)

        def relation(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RelationContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_inversion

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInversion"):
                listener.enterInversion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInversion"):
                listener.exitInversion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInversion"):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)

    def inversion(self):

        localctx = OpenSCENARIO2Parser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_inversion)
        try:
            self.state = 1125
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__74]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self.match(OpenSCENARIO2Parser.T__74)
                self.state = 1123
                self.inversion()
                pass
            elif token in [OpenSCENARIO2Parser.T__69, OpenSCENARIO2Parser.T__82, OpenSCENARIO2Parser.T__86, OpenSCENARIO2Parser.OPEN_BRACK, OpenSCENARIO2Parser.OPEN_PAREN, OpenSCENARIO2Parser.StringLiteral, OpenSCENARIO2Parser.FloatLiteral, OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral, OpenSCENARIO2Parser.BoolLiteral, OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1124
                self.relation(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_relation

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class RelationExpContext(RelationContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RelationContext, 0)

        def relationalOp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RelationalOpContext, 0)

        def sumExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SumExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationExp"):
                listener.enterRelationExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationExp"):
                listener.exitRelationExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationExp"):
                return visitor.visitRelationExp(self)
            else:
                return visitor.visitChildren(self)

    class SumExpContext(RelationContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sumExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SumExpressionContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSumExp"):
                listener.enterSumExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSumExp"):
                listener.exitSumExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSumExp"):
                return visitor.visitSumExp(self)
            else:
                return visitor.visitChildren(self)

    def relation(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OpenSCENARIO2Parser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 236
        self.enterRecursionRule(localctx, 236, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OpenSCENARIO2Parser.SumExpContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1128
            self.sumExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1136
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OpenSCENARIO2Parser.RelationExpContext(
                        self, OpenSCENARIO2Parser.RelationContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1130
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1131
                    self.relationalOp()
                    self.state = 1132
                    self.sumExpression(0)
                self.state = 1138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 107, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalOpContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_relationalOp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRelationalOp"):
                listener.enterRelationalOp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRelationalOp"):
                listener.exitRelationalOp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRelationalOp"):
                return visitor.visitRelationalOp(self)
            else:
                return visitor.visitChildren(self)

    def relationalOp(self):

        localctx = OpenSCENARIO2Parser.RelationalOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_relationalOp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1139
            _la = self._input.LA(1)
            if not (((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & ((1 << (OpenSCENARIO2Parser.T__22 - 23)) | (1 << (OpenSCENARIO2Parser.T__75 - 23)) | (1 << (OpenSCENARIO2Parser.T__76 - 23)) | (1 << (OpenSCENARIO2Parser.T__77 - 23)) | (1 << (OpenSCENARIO2Parser.T__78 - 23)) | (1 << (OpenSCENARIO2Parser.T__79 - 23)) | (1 << (OpenSCENARIO2Parser.T__80 - 23)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SumExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_sumExpression

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class TermExpContext(SumExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.SumExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def term(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TermContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTermExp"):
                listener.enterTermExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTermExp"):
                listener.exitTermExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTermExp"):
                return visitor.visitTermExp(self)
            else:
                return visitor.visitChildren(self)

    class AdditiveExpContext(SumExpressionContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.SumExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sumExpression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.SumExpressionContext, 0)

        def additiveOp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.AdditiveOpContext, 0)

        def term(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TermContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveExp"):
                listener.enterAdditiveExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveExp"):
                listener.exitAdditiveExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAdditiveExp"):
                return visitor.visitAdditiveExp(self)
            else:
                return visitor.visitChildren(self)

    def sumExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OpenSCENARIO2Parser.SumExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 240
        self.enterRecursionRule(localctx, 240, self.RULE_sumExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OpenSCENARIO2Parser.TermExpContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1142
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1150
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OpenSCENARIO2Parser.AdditiveExpContext(
                        self, OpenSCENARIO2Parser.SumExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sumExpression)
                    self.state = 1144
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1145
                    self.additiveOp()
                    self.state = 1146
                    self.term(0)
                self.state = 1152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 108, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveOpContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_additiveOp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveOp"):
                listener.enterAdditiveOp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveOp"):
                listener.exitAdditiveOp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitAdditiveOp"):
                return visitor.visitAdditiveOp(self)
            else:
                return visitor.visitChildren(self)

    def additiveOp(self):

        localctx = OpenSCENARIO2Parser.AdditiveOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_additiveOp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            _la = self._input.LA(1)
            if not (_la == OpenSCENARIO2Parser.T__81 or _la == OpenSCENARIO2Parser.T__82):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_term

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class MultiplicativeExpContext(TermContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def term(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TermContext, 0)

        def multiplicativeOp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.MultiplicativeOpContext, 0)

        def factor(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FactorContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeExp"):
                listener.enterMultiplicativeExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeExp"):
                listener.exitMultiplicativeExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMultiplicativeExp"):
                return visitor.visitMultiplicativeExp(self)
            else:
                return visitor.visitChildren(self)

    class FactorExpContext(TermContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def factor(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FactorContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactorExp"):
                listener.enterFactorExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactorExp"):
                listener.exitFactorExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFactorExp"):
                return visitor.visitFactorExp(self)
            else:
                return visitor.visitChildren(self)

    def term(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OpenSCENARIO2Parser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 244
        self.enterRecursionRule(localctx, 244, self.RULE_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OpenSCENARIO2Parser.FactorExpContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1156
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = OpenSCENARIO2Parser.MultiplicativeExpContext(
                        self, OpenSCENARIO2Parser.TermContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 1158
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1159
                    self.multiplicativeOp()
                    self.state = 1160
                    self.factor()
                self.state = 1166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 109, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeOpContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_multiplicativeOp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeOp"):
                listener.enterMultiplicativeOp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeOp"):
                listener.exitMultiplicativeOp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitMultiplicativeOp"):
                return visitor.visitMultiplicativeOp(self)
            else:
                return visitor.visitChildren(self)

    def multiplicativeOp(self):

        localctx = OpenSCENARIO2Parser.MultiplicativeOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_multiplicativeOp)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            _la = self._input.LA(1)
            if not (((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (OpenSCENARIO2Parser.T__83 - 84)) | (1 << (OpenSCENARIO2Parser.T__84 - 84)) | (1 << (OpenSCENARIO2Parser.T__85 - 84)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def factor(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FactorContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_factor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFactor"):
                listener.enterFactor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFactor"):
                listener.exitFactor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFactor"):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)

    def factor(self):

        localctx = OpenSCENARIO2Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_factor)
        try:
            self.state = 1172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__69, OpenSCENARIO2Parser.T__86, OpenSCENARIO2Parser.OPEN_BRACK, OpenSCENARIO2Parser.OPEN_PAREN, OpenSCENARIO2Parser.StringLiteral, OpenSCENARIO2Parser.FloatLiteral, OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral, OpenSCENARIO2Parser.BoolLiteral, OpenSCENARIO2Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1169
                self.postfixExp(0)
                pass
            elif token in [OpenSCENARIO2Parser.T__82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1170
                self.match(OpenSCENARIO2Parser.T__82)
                self.state = 1171
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_postfixExp

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PrimaryExpressionContext(PostfixExpContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.PostfixExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PrimaryExpContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimaryExpression"):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimaryExpression"):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimaryExpression"):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)

    class CastExpressionContext(PostfixExpContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.PostfixExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def typeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeDeclaratorContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastExpression"):
                listener.enterCastExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastExpression"):
                listener.exitCastExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitCastExpression"):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)

    class FunctionApplicationExpressionContext(PostfixExpContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.PostfixExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentListContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunctionApplicationExpression"):
                listener.enterFunctionApplicationExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunctionApplicationExpression"):
                listener.exitFunctionApplicationExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunctionApplicationExpression"):
                return visitor.visitFunctionApplicationExpression(self)
            else:
                return visitor.visitChildren(self)

    class FieldAccessExpressionContext(PostfixExpContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.PostfixExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def fieldName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldAccessExpression"):
                listener.enterFieldAccessExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldAccessExpression"):
                listener.exitFieldAccessExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldAccessExpression"):
                return visitor.visitFieldAccessExpression(self)
            else:
                return visitor.visitChildren(self)

    class ElementAccessExpressionContext(PostfixExpContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.PostfixExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def OPEN_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_BRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def CLOSE_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_BRACK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterElementAccessExpression"):
                listener.enterElementAccessExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitElementAccessExpression"):
                listener.exitElementAccessExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitElementAccessExpression"):
                return visitor.visitElementAccessExpression(self)
            else:
                return visitor.visitChildren(self)

    class TypeTestExpressionContext(PostfixExpContext):

        def __init__(self, parser, ctx: ParserRuleContext):  # actually a OpenSCENARIO2Parser.PostfixExpContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def typeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeDeclaratorContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTypeTestExpression"):
                listener.enterTypeTestExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTypeTestExpression"):
                listener.exitTypeTestExpression(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTypeTestExpression"):
                return visitor.visitTypeTestExpression(self)
            else:
                return visitor.visitChildren(self)

    def postfixExp(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = OpenSCENARIO2Parser.PostfixExpContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 250
        self.enterRecursionRule(localctx, 250, self.RULE_postfixExp, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = OpenSCENARIO2Parser.PrimaryExpressionContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1175
            self.primaryExp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1207
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1205
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
                    if la_ == 1:
                        localctx = OpenSCENARIO2Parser.CastExpressionContext(
                            self, OpenSCENARIO2Parser.PostfixExpContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExp)
                        self.state = 1177
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1178
                        self.match(OpenSCENARIO2Parser.T__1)
                        self.state = 1179
                        self.match(OpenSCENARIO2Parser.T__40)
                        self.state = 1180
                        self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                        self.state = 1181
                        self.typeDeclarator()
                        self.state = 1182
                        self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
                        pass

                    elif la_ == 2:
                        localctx = OpenSCENARIO2Parser.TypeTestExpressionContext(
                            self, OpenSCENARIO2Parser.PostfixExpContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExp)
                        self.state = 1184
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1185
                        self.match(OpenSCENARIO2Parser.T__1)
                        self.state = 1186
                        self.match(OpenSCENARIO2Parser.T__3)
                        self.state = 1187
                        self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                        self.state = 1188
                        self.typeDeclarator()
                        self.state = 1189
                        self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
                        pass

                    elif la_ == 3:
                        localctx = OpenSCENARIO2Parser.ElementAccessExpressionContext(
                            self, OpenSCENARIO2Parser.PostfixExpContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExp)
                        self.state = 1191
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1192
                        self.match(OpenSCENARIO2Parser.OPEN_BRACK)
                        self.state = 1193
                        self.expression()
                        self.state = 1194
                        self.match(OpenSCENARIO2Parser.CLOSE_BRACK)
                        pass

                    elif la_ == 4:
                        localctx = OpenSCENARIO2Parser.FunctionApplicationExpressionContext(
                            self, OpenSCENARIO2Parser.PostfixExpContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExp)
                        self.state = 1196
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1197
                        self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                        self.state = 1199
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (OpenSCENARIO2Parser.T__69 - 70)) | (1 << (OpenSCENARIO2Parser.T__74 - 70)) | (1 << (OpenSCENARIO2Parser.T__82 - 70)) | (1 << (OpenSCENARIO2Parser.T__86 - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_BRACK - 70)) | (1 << (OpenSCENARIO2Parser.OPEN_PAREN - 70)) | (1 << (OpenSCENARIO2Parser.StringLiteral - 70)) | (1 << (OpenSCENARIO2Parser.FloatLiteral - 70)) | (1 << (OpenSCENARIO2Parser.UintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.HexUintLiteral - 70)) | (1 << (OpenSCENARIO2Parser.IntLiteral - 70)) | (1 << (OpenSCENARIO2Parser.BoolLiteral - 70)) | (1 << (OpenSCENARIO2Parser.Identifier - 70)))) != 0):
                            self.state = 1198
                            self.argumentList()

                        self.state = 1201
                        self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
                        pass

                    elif la_ == 5:
                        localctx = OpenSCENARIO2Parser.FieldAccessExpressionContext(
                            self, OpenSCENARIO2Parser.PostfixExpContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExp)
                        self.state = 1202
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1203
                        self.match(OpenSCENARIO2Parser.T__1)
                        self.state = 1204
                        self.fieldName()
                        pass

                self.state = 1209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class FieldAccessContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PostfixExpContext, 0)

        def fieldName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_fieldAccess

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFieldAccess"):
                listener.enterFieldAccess(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFieldAccess"):
                listener.exitFieldAccess(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFieldAccess"):
                return visitor.visitFieldAccess(self)
            else:
                return visitor.visitChildren(self)

    def fieldAccess(self):

        localctx = OpenSCENARIO2Parser.FieldAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_fieldAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.postfixExp(0)
            self.state = 1211
            self.match(OpenSCENARIO2Parser.T__1)
            self.state = 1212
            self.fieldName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryExpContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueExp(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ValueExpContext, 0)

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_primaryExp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrimaryExp"):
                listener.enterPrimaryExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrimaryExp"):
                listener.exitPrimaryExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrimaryExp"):
                return visitor.visitPrimaryExp(self)
            else:
                return visitor.visitChildren(self)

    def primaryExp(self):

        localctx = OpenSCENARIO2Parser.PrimaryExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_primaryExp)
        try:
            self.state = 1221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 114, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.valueExp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.match(OpenSCENARIO2Parser.T__86)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1216
                self.match(OpenSCENARIO2Parser.Identifier)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1217
                self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                self.state = 1218
                self.expression()
                self.state = 1219
                self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueExpContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physicalLiteral(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.PhysicalLiteralContext, 0)

        def FloatLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.FloatLiteral, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.IntegerLiteralContext, 0)

        def BoolLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.BoolLiteral, 0)

        def StringLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.StringLiteral, 0)

        def identifierReference(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.IdentifierReferenceContext, 0)

        def enumValueReference(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.EnumValueReferenceContext, 0)

        def listConstructor(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ListConstructorContext, 0)

        def rangeConstructor(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.RangeConstructorContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_valueExp

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterValueExp"):
                listener.enterValueExp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitValueExp"):
                listener.exitValueExp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitValueExp"):
                return visitor.visitValueExp(self)
            else:
                return visitor.visitChildren(self)

    def valueExp(self):

        localctx = OpenSCENARIO2Parser.ValueExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_valueExp)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 115, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1223
                self.physicalLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1224
                self.match(OpenSCENARIO2Parser.FloatLiteral)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1225
                self.integerLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1226
                self.match(OpenSCENARIO2Parser.BoolLiteral)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1227
                self.match(OpenSCENARIO2Parser.StringLiteral)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1228
                self.identifierReference()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1229
                self.enumValueReference()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1230
                self.listConstructor()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1231
                self.rangeConstructor()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_BRACK, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, i)

        def CLOSE_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_listConstructor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterListConstructor"):
                listener.enterListConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitListConstructor"):
                listener.exitListConstructor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitListConstructor"):
                return visitor.visitListConstructor(self)
            else:
                return visitor.visitChildren(self)

    def listConstructor(self):

        localctx = OpenSCENARIO2Parser.ListConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_listConstructor)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(OpenSCENARIO2Parser.OPEN_BRACK)
            self.state = 1235
            self.expression()
            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 1236
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1237
                self.expression()
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1243
            self.match(OpenSCENARIO2Parser.CLOSE_BRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RangeConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_PAREN, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, i)

        def CLOSE_PAREN(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_PAREN, 0)

        def OPEN_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(OpenSCENARIO2Parser.CLOSE_BRACK, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_rangeConstructor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRangeConstructor"):
                listener.enterRangeConstructor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRangeConstructor"):
                listener.exitRangeConstructor(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitRangeConstructor"):
                return visitor.visitRangeConstructor(self)
            else:
                return visitor.visitChildren(self)

    def rangeConstructor(self):

        localctx = OpenSCENARIO2Parser.RangeConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_rangeConstructor)
        try:
            self.state = 1258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.T__69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.match(OpenSCENARIO2Parser.T__69)
                self.state = 1246
                self.match(OpenSCENARIO2Parser.OPEN_PAREN)
                self.state = 1247
                self.expression()
                self.state = 1248
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1249
                self.expression()
                self.state = 1250
                self.match(OpenSCENARIO2Parser.CLOSE_PAREN)
                pass
            elif token in [OpenSCENARIO2Parser.OPEN_BRACK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1252
                self.match(OpenSCENARIO2Parser.OPEN_BRACK)
                self.state = 1253
                self.expression()
                self.state = 1254
                self.match(OpenSCENARIO2Parser.T__87)
                self.state = 1255
                self.expression()
                self.state = 1256
                self.match(OpenSCENARIO2Parser.CLOSE_BRACK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.FieldNameContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.FieldNameContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_identifierReference

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierReference"):
                listener.enterIdentifierReference(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierReference"):
                listener.exitIdentifierReference(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIdentifierReference"):
                return visitor.visitIdentifierReference(self)
            else:
                return visitor.visitChildren(self)

    def identifierReference(self):

        localctx = OpenSCENARIO2Parser.IdentifierReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_identifierReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1260
                    self.fieldName()
                    self.state = 1261
                    self.match(OpenSCENARIO2Parser.T__1)
                self.state = 1267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 118, self._ctx)

            self.state = 1268
            self.fieldName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentListSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentSpecification(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.ArgumentSpecificationContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentSpecificationContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_argumentListSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgumentListSpecification"):
                listener.enterArgumentListSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgumentListSpecification"):
                listener.exitArgumentListSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgumentListSpecification"):
                return visitor.visitArgumentListSpecification(self)
            else:
                return visitor.visitChildren(self)

    def argumentListSpecification(self):

        localctx = OpenSCENARIO2Parser.ArgumentListSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_argumentListSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.argumentSpecification()
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == OpenSCENARIO2Parser.T__7:
                self.state = 1271
                self.match(OpenSCENARIO2Parser.T__7)
                self.state = 1272
                self.argumentSpecification()
                self.state = 1277
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentNameContext, 0)

        def typeDeclarator(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.TypeDeclaratorContext, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.DefaultValueContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_argumentSpecification

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgumentSpecification"):
                listener.enterArgumentSpecification(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgumentSpecification"):
                listener.exitArgumentSpecification(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgumentSpecification"):
                return visitor.visitArgumentSpecification(self)
            else:
                return visitor.visitChildren(self)

    def argumentSpecification(self):

        localctx = OpenSCENARIO2Parser.ArgumentSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_argumentSpecification)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.argumentName()
            self.state = 1279
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 1280
            self.typeDeclarator()
            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == OpenSCENARIO2Parser.T__20:
                self.state = 1281
                self.match(OpenSCENARIO2Parser.T__20)
                self.state = 1282
                self.defaultValue()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentNameContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(OpenSCENARIO2Parser.Identifier, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_argumentName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgumentName"):
                listener.enterArgumentName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgumentName"):
                listener.exitArgumentName(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgumentName"):
                return visitor.visitArgumentName(self)
            else:
                return visitor.visitChildren(self)

    def argumentName(self):

        localctx = OpenSCENARIO2Parser.ArgumentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_argumentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(OpenSCENARIO2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentListContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positionalArgument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.PositionalArgumentContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.PositionalArgumentContext, i)

        def namedArgument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(OpenSCENARIO2Parser.NamedArgumentContext)
            else:
                return self.getTypedRuleContext(OpenSCENARIO2Parser.NamedArgumentContext, i)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_argumentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgumentList"):
                listener.enterArgumentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgumentList"):
                listener.exitArgumentList(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgumentList"):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)

    def argumentList(self):

        localctx = OpenSCENARIO2Parser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_argumentList)
        self._la = 0  # Token type
        try:
            self.state = 1310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 124, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.positionalArgument()
                self.state = 1292
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 121, self._ctx)
                while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1288
                        self.match(OpenSCENARIO2Parser.T__7)
                        self.state = 1289
                        self.positionalArgument()
                    self.state = 1294
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input, 121, self._ctx)

                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == OpenSCENARIO2Parser.T__7:
                    self.state = 1295
                    self.match(OpenSCENARIO2Parser.T__7)
                    self.state = 1296
                    self.namedArgument()
                    self.state = 1301
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.namedArgument()
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la == OpenSCENARIO2Parser.T__7:
                    self.state = 1303
                    self.match(OpenSCENARIO2Parser.T__7)
                    self.state = 1304
                    self.namedArgument()
                    self.state = 1309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PositionalArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_positionalArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPositionalArgument"):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPositionalArgument"):
                listener.exitPositionalArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPositionalArgument"):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)

    def positionalArgument(self):

        localctx = OpenSCENARIO2Parser.PositionalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_positionalArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argumentName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ArgumentNameContext, 0)

        def expression(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_namedArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNamedArgument"):
                listener.enterNamedArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNamedArgument"):
                listener.exitNamedArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNamedArgument"):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)

    def namedArgument(self):

        localctx = OpenSCENARIO2Parser.NamedArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_namedArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.argumentName()
            self.state = 1315
            self.match(OpenSCENARIO2Parser.T__8)
            self.state = 1316
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PhysicalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unitName(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.UnitNameContext, 0)

        def FloatLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.FloatLiteral, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(OpenSCENARIO2Parser.IntegerLiteralContext, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_physicalLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPhysicalLiteral"):
                listener.enterPhysicalLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPhysicalLiteral"):
                listener.exitPhysicalLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPhysicalLiteral"):
                return visitor.visitPhysicalLiteral(self)
            else:
                return visitor.visitChildren(self)

    def physicalLiteral(self):

        localctx = OpenSCENARIO2Parser.PhysicalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_physicalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [OpenSCENARIO2Parser.FloatLiteral]:
                self.state = 1318
                self.match(OpenSCENARIO2Parser.FloatLiteral)
                pass
            elif token in [OpenSCENARIO2Parser.UintLiteral, OpenSCENARIO2Parser.HexUintLiteral, OpenSCENARIO2Parser.IntLiteral]:
                self.state = 1319
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1322
            self.unitName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UintLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.UintLiteral, 0)

        def HexUintLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.HexUintLiteral, 0)

        def IntLiteral(self):
            return self.getToken(OpenSCENARIO2Parser.IntLiteral, 0)

        def getRuleIndex(self):
            return OpenSCENARIO2Parser.RULE_integerLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntegerLiteral"):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntegerLiteral"):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntegerLiteral"):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)

    def integerLiteral(self):

        localctx = OpenSCENARIO2Parser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_integerLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            _la = self._input.LA(1)
            if not (((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (OpenSCENARIO2Parser.UintLiteral - 99)) | (1 << (OpenSCENARIO2Parser.HexUintLiteral - 99)) | (1 << (OpenSCENARIO2Parser.IntLiteral - 99)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[4] = self.structuredIdentifier_sempred
        self._predicates[118] = self.relation_sempred
        self._predicates[120] = self.sumExpression_sempred
        self._predicates[122] = self.term_sempred
        self._predicates[125] = self.postfixExp_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def structuredIdentifier_sempred(self, localctx: StructuredIdentifierContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def relation_sempred(self, localctx: RelationContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def sumExpression_sempred(self, localctx: SumExpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def term_sempred(self, localctx: TermContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 1)

    def postfixExp_sempred(self, localctx: PostfixExpContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 5)

        if predIndex == 5:
            return self.precpred(self._ctx, 4)

        if predIndex == 6:
            return self.precpred(self._ctx, 3)

        if predIndex == 7:
            return self.precpred(self._ctx, 2)

        if predIndex == 8:
            return self.precpred(self._ctx, 1)
