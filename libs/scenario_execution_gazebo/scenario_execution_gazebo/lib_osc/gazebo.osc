import osc.standard.base
import osc.robotics

action actor_exists:
    # report success if an actor with a specific name exists
    entity_name: string                 # name of the actor within simulation
    world_name: string = 'default'      # simulation world name

action osc_actor.delete:
    # Delete an actor from simulation
    entity_name: string                 # name of the actor within simulation
    world_name: string = 'default'      # simulation world name

action osc_actor.relative_spawn:
    # Spawn a simulation entity at a position relative to the frame_id (at a specified distance in front of  frame_id)
    frame_id: string = 'base_link'      # frame_id to spawn the actor relative to
    parent_frame_id: string = "map"     # parent frame_id of the relative frame_id
    distance: length                    # distance value relative to the frame_id at which to spawn the new actor
    model: string                       # model definition
    world_name: string = 'default'      # simulation world name
    xacro_arguments: string = ''        # comma-separated list of argument key:=value pairs

action osc_actor.spawn:
    # Spawn a simulation entity.
    spawn_pose: pose_3d                 # position at which the object gets spawned
    model: string                       # model definition
    world_name: string = 'default'      # simulation world name
    xacro_arguments: string = ''        # comma-separated list of argument key:=value pairs

action wait_for_sim:
    # Wait for simulation to become active
    timeout: time = 60s                 # time to wait for the simulation. return failure afterwards.
    world_name: string = 'default'      # simulation world name
