import osc.ros
import osc.gazebo

scenario nav2_simulation_nav_to_pose:
    turtlebot4: differential_drive_robot
    box: amr_object with:
        keep(it.model == 'example_simulation://models/box.sdf')
    do parallel:
        test_drive: serial:
            turtlebot4.init_nav2(pose_3d(position_3d(x: 0.0m, y: 0.0m)))
            parallel:
                serial:
                    turtlebot4.nav_to_pose(pose_3d(position_3d(x: 3.0m, y: -3.0m)))
                    turtlebot4.nav_to_pose(pose_3d(position_3d(x: 0.0m, y: 0.0m)))
                serial:
                    turtlebot4.tf_close_to(
                        reference_point: position_3d(x: 1.5m, y: -1.5m),
                        threshold: 0.4m,
                        robot_frame_id: 'turtlebot4_base_link_gt')
                    box.spawn(
                        spawn_pose: pose_3d(
                            position: position_3d(x: 2.0m, y: -2.0m, z: 0.1m),
                            orientation: orientation_3d(yaw: 0.0rad)),
                        world_name: 'maze')
            emit end
        time_out: serial:
            wait elapsed(120s)
            emit fail
